// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	store "github.com/consensys/orchestrate/src/api/store"
	entities "github.com/consensys/orchestrate/src/entities"
	database "github.com/consensys/orchestrate/src/infra/database"
	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockStore) Connect(ctx context.Context, conf interface{}) (store.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, conf)
	ret0, _ := ret[0].(store.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockStoreMockRecorder) Connect(ctx, conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStore)(nil).Connect), ctx, conf)
}

// MockAgents is a mock of Agents interface
type MockAgents struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsMockRecorder
}

// MockAgentsMockRecorder is the mock recorder for MockAgents
type MockAgentsMockRecorder struct {
	mock *MockAgents
}

// NewMockAgents creates a new mock instance
func NewMockAgents(ctrl *gomock.Controller) *MockAgents {
	mock := &MockAgents{ctrl: ctrl}
	mock.recorder = &MockAgentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgents) EXPECT() *MockAgentsMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockAgents) Schedule() store.ScheduleAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(store.ScheduleAgent)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockAgentsMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockAgents)(nil).Schedule))
}

// Job mocks base method
func (m *MockAgents) Job() store.JobAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(store.JobAgent)
	return ret0
}

// Job indicates an expected call of Job
func (mr *MockAgentsMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockAgents)(nil).Job))
}

// Log mocks base method
func (m *MockAgents) Log() store.LogAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(store.LogAgent)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockAgentsMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAgents)(nil).Log))
}

// Transaction mocks base method
func (m *MockAgents) Transaction() store.TransactionAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(store.TransactionAgent)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockAgentsMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockAgents)(nil).Transaction))
}

// TransactionRequest mocks base method
func (m *MockAgents) TransactionRequest() store.TransactionRequestAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRequest")
	ret0, _ := ret[0].(store.TransactionRequestAgent)
	return ret0
}

// TransactionRequest indicates an expected call of TransactionRequest
func (mr *MockAgentsMockRecorder) TransactionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRequest", reflect.TypeOf((*MockAgents)(nil).TransactionRequest))
}

// Account mocks base method
func (m *MockAgents) Account() store.AccountAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(store.AccountAgent)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockAgentsMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAgents)(nil).Account))
}

// Faucet mocks base method
func (m *MockAgents) Faucet() store.FaucetAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Faucet")
	ret0, _ := ret[0].(store.FaucetAgent)
	return ret0
}

// Faucet indicates an expected call of Faucet
func (mr *MockAgentsMockRecorder) Faucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Faucet", reflect.TypeOf((*MockAgents)(nil).Faucet))
}

// ContractEvent mocks base method
func (m *MockAgents) ContractEvent() store.ContractEventAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEvent")
	ret0, _ := ret[0].(store.ContractEventAgent)
	return ret0
}

// ContractEvent indicates an expected call of ContractEvent
func (mr *MockAgentsMockRecorder) ContractEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEvent", reflect.TypeOf((*MockAgents)(nil).ContractEvent))
}

// Contract mocks base method
func (m *MockAgents) Contract() store.ContractAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contract")
	ret0, _ := ret[0].(store.ContractAgent)
	return ret0
}

// Contract indicates an expected call of Contract
func (mr *MockAgentsMockRecorder) Contract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contract", reflect.TypeOf((*MockAgents)(nil).Contract))
}

// Chain mocks base method
func (m *MockAgents) Chain() store.ChainAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(store.ChainAgent)
	return ret0
}

// Chain indicates an expected call of Chain
func (mr *MockAgentsMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockAgents)(nil).Chain))
}

// PrivateTxManager mocks base method
func (m *MockAgents) PrivateTxManager() store.PrivateTxManagerAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateTxManager")
	ret0, _ := ret[0].(store.PrivateTxManagerAgent)
	return ret0
}

// PrivateTxManager indicates an expected call of PrivateTxManager
func (mr *MockAgentsMockRecorder) PrivateTxManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateTxManager", reflect.TypeOf((*MockAgents)(nil).PrivateTxManager))
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockDB) Begin() (database.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(database.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// Schedule mocks base method
func (m *MockDB) Schedule() store.ScheduleAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(store.ScheduleAgent)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockDBMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockDB)(nil).Schedule))
}

// Job mocks base method
func (m *MockDB) Job() store.JobAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(store.JobAgent)
	return ret0
}

// Job indicates an expected call of Job
func (mr *MockDBMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockDB)(nil).Job))
}

// Log mocks base method
func (m *MockDB) Log() store.LogAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(store.LogAgent)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockDBMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockDB)(nil).Log))
}

// Transaction mocks base method
func (m *MockDB) Transaction() store.TransactionAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(store.TransactionAgent)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockDBMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockDB)(nil).Transaction))
}

// TransactionRequest mocks base method
func (m *MockDB) TransactionRequest() store.TransactionRequestAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRequest")
	ret0, _ := ret[0].(store.TransactionRequestAgent)
	return ret0
}

// TransactionRequest indicates an expected call of TransactionRequest
func (mr *MockDBMockRecorder) TransactionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRequest", reflect.TypeOf((*MockDB)(nil).TransactionRequest))
}

// Account mocks base method
func (m *MockDB) Account() store.AccountAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(store.AccountAgent)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockDBMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockDB)(nil).Account))
}

// Faucet mocks base method
func (m *MockDB) Faucet() store.FaucetAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Faucet")
	ret0, _ := ret[0].(store.FaucetAgent)
	return ret0
}

// Faucet indicates an expected call of Faucet
func (mr *MockDBMockRecorder) Faucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Faucet", reflect.TypeOf((*MockDB)(nil).Faucet))
}

// ContractEvent mocks base method
func (m *MockDB) ContractEvent() store.ContractEventAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEvent")
	ret0, _ := ret[0].(store.ContractEventAgent)
	return ret0
}

// ContractEvent indicates an expected call of ContractEvent
func (mr *MockDBMockRecorder) ContractEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEvent", reflect.TypeOf((*MockDB)(nil).ContractEvent))
}

// Contract mocks base method
func (m *MockDB) Contract() store.ContractAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contract")
	ret0, _ := ret[0].(store.ContractAgent)
	return ret0
}

// Contract indicates an expected call of Contract
func (mr *MockDBMockRecorder) Contract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contract", reflect.TypeOf((*MockDB)(nil).Contract))
}

// Chain mocks base method
func (m *MockDB) Chain() store.ChainAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(store.ChainAgent)
	return ret0
}

// Chain indicates an expected call of Chain
func (mr *MockDBMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockDB)(nil).Chain))
}

// PrivateTxManager mocks base method
func (m *MockDB) PrivateTxManager() store.PrivateTxManagerAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateTxManager")
	ret0, _ := ret[0].(store.PrivateTxManagerAgent)
	return ret0
}

// PrivateTxManager indicates an expected call of PrivateTxManager
func (mr *MockDBMockRecorder) PrivateTxManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateTxManager", reflect.TypeOf((*MockDB)(nil).PrivateTxManager))
}

// MockTx is a mock of Tx interface
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockTx) Begin() (database.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(database.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockTxMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTx)(nil).Begin))
}

// Commit mocks base method
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// Rollback mocks base method
func (m *MockTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}

// Close mocks base method
func (m *MockTx) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockTxMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTx)(nil).Close))
}

// Schedule mocks base method
func (m *MockTx) Schedule() store.ScheduleAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(store.ScheduleAgent)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockTxMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockTx)(nil).Schedule))
}

// Job mocks base method
func (m *MockTx) Job() store.JobAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(store.JobAgent)
	return ret0
}

// Job indicates an expected call of Job
func (mr *MockTxMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockTx)(nil).Job))
}

// Log mocks base method
func (m *MockTx) Log() store.LogAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(store.LogAgent)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockTxMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockTx)(nil).Log))
}

// Transaction mocks base method
func (m *MockTx) Transaction() store.TransactionAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(store.TransactionAgent)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockTxMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTx)(nil).Transaction))
}

// TransactionRequest mocks base method
func (m *MockTx) TransactionRequest() store.TransactionRequestAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRequest")
	ret0, _ := ret[0].(store.TransactionRequestAgent)
	return ret0
}

// TransactionRequest indicates an expected call of TransactionRequest
func (mr *MockTxMockRecorder) TransactionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRequest", reflect.TypeOf((*MockTx)(nil).TransactionRequest))
}

// Account mocks base method
func (m *MockTx) Account() store.AccountAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(store.AccountAgent)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockTxMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockTx)(nil).Account))
}

// Faucet mocks base method
func (m *MockTx) Faucet() store.FaucetAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Faucet")
	ret0, _ := ret[0].(store.FaucetAgent)
	return ret0
}

// Faucet indicates an expected call of Faucet
func (mr *MockTxMockRecorder) Faucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Faucet", reflect.TypeOf((*MockTx)(nil).Faucet))
}

// ContractEvent mocks base method
func (m *MockTx) ContractEvent() store.ContractEventAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEvent")
	ret0, _ := ret[0].(store.ContractEventAgent)
	return ret0
}

// ContractEvent indicates an expected call of ContractEvent
func (mr *MockTxMockRecorder) ContractEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEvent", reflect.TypeOf((*MockTx)(nil).ContractEvent))
}

// Contract mocks base method
func (m *MockTx) Contract() store.ContractAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contract")
	ret0, _ := ret[0].(store.ContractAgent)
	return ret0
}

// Contract indicates an expected call of Contract
func (mr *MockTxMockRecorder) Contract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contract", reflect.TypeOf((*MockTx)(nil).Contract))
}

// Chain mocks base method
func (m *MockTx) Chain() store.ChainAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(store.ChainAgent)
	return ret0
}

// Chain indicates an expected call of Chain
func (mr *MockTxMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockTx)(nil).Chain))
}

// PrivateTxManager mocks base method
func (m *MockTx) PrivateTxManager() store.PrivateTxManagerAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateTxManager")
	ret0, _ := ret[0].(store.PrivateTxManagerAgent)
	return ret0
}

// PrivateTxManager indicates an expected call of PrivateTxManager
func (mr *MockTxMockRecorder) PrivateTxManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateTxManager", reflect.TypeOf((*MockTx)(nil).PrivateTxManager))
}

// MockTransactionRequestAgent is a mock of TransactionRequestAgent interface
type MockTransactionRequestAgent struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRequestAgentMockRecorder
}

// MockTransactionRequestAgentMockRecorder is the mock recorder for MockTransactionRequestAgent
type MockTransactionRequestAgentMockRecorder struct {
	mock *MockTransactionRequestAgent
}

// NewMockTransactionRequestAgent creates a new mock instance
func NewMockTransactionRequestAgent(ctrl *gomock.Controller) *MockTransactionRequestAgent {
	mock := &MockTransactionRequestAgent{ctrl: ctrl}
	mock.recorder = &MockTransactionRequestAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionRequestAgent) EXPECT() *MockTransactionRequestAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockTransactionRequestAgent) Insert(ctx context.Context, txRequest *entities.TxRequest, requestHash, scheduleUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, txRequest, requestHash, scheduleUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTransactionRequestAgentMockRecorder) Insert(ctx, txRequest, requestHash, scheduleUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTransactionRequestAgent)(nil).Insert), ctx, txRequest, requestHash, scheduleUUID)
}

// FindOneByIdempotencyKey mocks base method
func (m *MockTransactionRequestAgent) FindOneByIdempotencyKey(ctx context.Context, idempotencyKey, tenantID, ownerID string) (*entities.TxRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIdempotencyKey", ctx, idempotencyKey, tenantID, ownerID)
	ret0, _ := ret[0].(*entities.TxRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByIdempotencyKey indicates an expected call of FindOneByIdempotencyKey
func (mr *MockTransactionRequestAgentMockRecorder) FindOneByIdempotencyKey(ctx, idempotencyKey, tenantID, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIdempotencyKey", reflect.TypeOf((*MockTransactionRequestAgent)(nil).FindOneByIdempotencyKey), ctx, idempotencyKey, tenantID, ownerID)
}

// FindOneByUUID mocks base method
func (m *MockTransactionRequestAgent) FindOneByUUID(ctx context.Context, scheduleUUID string, tenants []string, ownerID string) (*entities.TxRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, scheduleUUID, tenants, ownerID)
	ret0, _ := ret[0].(*entities.TxRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID
func (mr *MockTransactionRequestAgentMockRecorder) FindOneByUUID(ctx, scheduleUUID, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockTransactionRequestAgent)(nil).FindOneByUUID), ctx, scheduleUUID, tenants, ownerID)
}

// Search mocks base method
func (m *MockTransactionRequestAgent) Search(ctx context.Context, filters *entities.TransactionRequestFilters, tenants []string, ownerID string) ([]*entities.TxRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants, ownerID)
	ret0, _ := ret[0].([]*entities.TxRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockTransactionRequestAgentMockRecorder) Search(ctx, filters, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTransactionRequestAgent)(nil).Search), ctx, filters, tenants, ownerID)
}

// MockScheduleAgent is a mock of ScheduleAgent interface
type MockScheduleAgent struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleAgentMockRecorder
}

// MockScheduleAgentMockRecorder is the mock recorder for MockScheduleAgent
type MockScheduleAgentMockRecorder struct {
	mock *MockScheduleAgent
}

// NewMockScheduleAgent creates a new mock instance
func NewMockScheduleAgent(ctrl *gomock.Controller) *MockScheduleAgent {
	mock := &MockScheduleAgent{ctrl: ctrl}
	mock.recorder = &MockScheduleAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduleAgent) EXPECT() *MockScheduleAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockScheduleAgent) Insert(ctx context.Context, schedule *entities.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockScheduleAgentMockRecorder) Insert(ctx, schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockScheduleAgent)(nil).Insert), ctx, schedule)
}

// FindOneByUUID mocks base method
func (m *MockScheduleAgent) FindOneByUUID(ctx context.Context, uuid string, tenants []string, ownerID string) (*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, uuid, tenants, ownerID)
	ret0, _ := ret[0].(*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID
func (mr *MockScheduleAgentMockRecorder) FindOneByUUID(ctx, uuid, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockScheduleAgent)(nil).FindOneByUUID), ctx, uuid, tenants, ownerID)
}

// FindAll mocks base method
func (m *MockScheduleAgent) FindAll(ctx context.Context, tenants []string, ownerID string) ([]*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, tenants, ownerID)
	ret0, _ := ret[0].([]*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockScheduleAgentMockRecorder) FindAll(ctx, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockScheduleAgent)(nil).FindAll), ctx, tenants, ownerID)
}

// MockJobAgent is a mock of JobAgent interface
type MockJobAgent struct {
	ctrl     *gomock.Controller
	recorder *MockJobAgentMockRecorder
}

// MockJobAgentMockRecorder is the mock recorder for MockJobAgent
type MockJobAgentMockRecorder struct {
	mock *MockJobAgent
}

// NewMockJobAgent creates a new mock instance
func NewMockJobAgent(ctrl *gomock.Controller) *MockJobAgent {
	mock := &MockJobAgent{ctrl: ctrl}
	mock.recorder = &MockJobAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobAgent) EXPECT() *MockJobAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockJobAgent) Insert(ctx context.Context, job *entities.Job, scheduleUUID, txUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, job, scheduleUUID, txUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockJobAgentMockRecorder) Insert(ctx, job, scheduleUUID, txUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockJobAgent)(nil).Insert), ctx, job, scheduleUUID, txUUID)
}

// Update mocks base method
func (m *MockJobAgent) Update(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockJobAgentMockRecorder) Update(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobAgent)(nil).Update), ctx, job)
}

// FindOneByUUID mocks base method
func (m *MockJobAgent) FindOneByUUID(ctx context.Context, uuid string, tenants []string, ownerID string, withLogs bool) (*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, uuid, tenants, ownerID, withLogs)
	ret0, _ := ret[0].(*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID
func (mr *MockJobAgentMockRecorder) FindOneByUUID(ctx, uuid, tenants, ownerID, withLogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockJobAgent)(nil).FindOneByUUID), ctx, uuid, tenants, ownerID, withLogs)
}

// LockOneByUUID mocks base method
func (m *MockJobAgent) LockOneByUUID(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockOneByUUID", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockOneByUUID indicates an expected call of LockOneByUUID
func (mr *MockJobAgentMockRecorder) LockOneByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockOneByUUID", reflect.TypeOf((*MockJobAgent)(nil).LockOneByUUID), ctx, uuid)
}

// Search mocks base method
func (m *MockJobAgent) Search(ctx context.Context, filters *entities.JobFilters, tenants []string, ownerID string) ([]*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants, ownerID)
	ret0, _ := ret[0].([]*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockJobAgentMockRecorder) Search(ctx, filters, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockJobAgent)(nil).Search), ctx, filters, tenants, ownerID)
}

// MockLogAgent is a mock of LogAgent interface
type MockLogAgent struct {
	ctrl     *gomock.Controller
	recorder *MockLogAgentMockRecorder
}

// MockLogAgentMockRecorder is the mock recorder for MockLogAgent
type MockLogAgentMockRecorder struct {
	mock *MockLogAgent
}

// NewMockLogAgent creates a new mock instance
func NewMockLogAgent(ctrl *gomock.Controller) *MockLogAgent {
	mock := &MockLogAgent{ctrl: ctrl}
	mock.recorder = &MockLogAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogAgent) EXPECT() *MockLogAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockLogAgent) Insert(ctx context.Context, log *entities.Log, jobUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, log, jobUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockLogAgentMockRecorder) Insert(ctx, log, jobUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLogAgent)(nil).Insert), ctx, log, jobUUID)
}

// MockTransactionAgent is a mock of TransactionAgent interface
type MockTransactionAgent struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionAgentMockRecorder
}

// MockTransactionAgentMockRecorder is the mock recorder for MockTransactionAgent
type MockTransactionAgentMockRecorder struct {
	mock *MockTransactionAgent
}

// NewMockTransactionAgent creates a new mock instance
func NewMockTransactionAgent(ctrl *gomock.Controller) *MockTransactionAgent {
	mock := &MockTransactionAgent{ctrl: ctrl}
	mock.recorder = &MockTransactionAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionAgent) EXPECT() *MockTransactionAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockTransactionAgent) Insert(ctx context.Context, tx *entities.ETHTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTransactionAgentMockRecorder) Insert(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTransactionAgent)(nil).Insert), ctx, tx)
}

// Update mocks base method
func (m *MockTransactionAgent) Update(ctx context.Context, tx *entities.ETHTransaction, jobUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, jobUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTransactionAgentMockRecorder) Update(ctx, tx, jobUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionAgent)(nil).Update), ctx, tx, jobUUID)
}

// FindOneByJobUUID mocks base method
func (m *MockTransactionAgent) FindOneByJobUUID(ctx context.Context, jobUUID string) (*entities.ETHTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByJobUUID", ctx, jobUUID)
	ret0, _ := ret[0].(*entities.ETHTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByJobUUID indicates an expected call of FindOneByJobUUID
func (mr *MockTransactionAgentMockRecorder) FindOneByJobUUID(ctx, jobUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByJobUUID", reflect.TypeOf((*MockTransactionAgent)(nil).FindOneByJobUUID), ctx, jobUUID)
}

// MockAccountAgent is a mock of AccountAgent interface
type MockAccountAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAgentMockRecorder
}

// MockAccountAgentMockRecorder is the mock recorder for MockAccountAgent
type MockAccountAgentMockRecorder struct {
	mock *MockAccountAgent
}

// NewMockAccountAgent creates a new mock instance
func NewMockAccountAgent(ctrl *gomock.Controller) *MockAccountAgent {
	mock := &MockAccountAgent{ctrl: ctrl}
	mock.recorder = &MockAccountAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAgent) EXPECT() *MockAccountAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockAccountAgent) Insert(ctx context.Context, account *entities.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockAccountAgentMockRecorder) Insert(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAccountAgent)(nil).Insert), ctx, account)
}

// Update mocks base method
func (m *MockAccountAgent) Update(ctx context.Context, account *entities.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAccountAgentMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountAgent)(nil).Update), ctx, account)
}

// FindOneByAddress mocks base method
func (m *MockAccountAgent) FindOneByAddress(ctx context.Context, address string, tenants []string, ownerID string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByAddress", ctx, address, tenants, ownerID)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByAddress indicates an expected call of FindOneByAddress
func (mr *MockAccountAgentMockRecorder) FindOneByAddress(ctx, address, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByAddress", reflect.TypeOf((*MockAccountAgent)(nil).FindOneByAddress), ctx, address, tenants, ownerID)
}

// Search mocks base method
func (m *MockAccountAgent) Search(ctx context.Context, filters *entities.AccountFilters, tenants []string, ownerID string) ([]*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants, ownerID)
	ret0, _ := ret[0].([]*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockAccountAgentMockRecorder) Search(ctx, filters, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAccountAgent)(nil).Search), ctx, filters, tenants, ownerID)
}

// MockFaucetAgent is a mock of FaucetAgent interface
type MockFaucetAgent struct {
	ctrl     *gomock.Controller
	recorder *MockFaucetAgentMockRecorder
}

// MockFaucetAgentMockRecorder is the mock recorder for MockFaucetAgent
type MockFaucetAgentMockRecorder struct {
	mock *MockFaucetAgent
}

// NewMockFaucetAgent creates a new mock instance
func NewMockFaucetAgent(ctrl *gomock.Controller) *MockFaucetAgent {
	mock := &MockFaucetAgent{ctrl: ctrl}
	mock.recorder = &MockFaucetAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFaucetAgent) EXPECT() *MockFaucetAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockFaucetAgent) Insert(ctx context.Context, faucet *entities.Faucet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, faucet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockFaucetAgentMockRecorder) Insert(ctx, faucet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFaucetAgent)(nil).Insert), ctx, faucet)
}

// Update mocks base method
func (m *MockFaucetAgent) Update(ctx context.Context, faucet *entities.Faucet, tenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, faucet, tenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockFaucetAgentMockRecorder) Update(ctx, faucet, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFaucetAgent)(nil).Update), ctx, faucet, tenants)
}

// FindOneByUUID mocks base method
func (m *MockFaucetAgent) FindOneByUUID(ctx context.Context, uuid string, tenants []string) (*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, uuid, tenants)
	ret0, _ := ret[0].(*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID
func (mr *MockFaucetAgentMockRecorder) FindOneByUUID(ctx, uuid, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockFaucetAgent)(nil).FindOneByUUID), ctx, uuid, tenants)
}

// Search mocks base method
func (m *MockFaucetAgent) Search(ctx context.Context, filters *entities.FaucetFilters, tenants []string) ([]*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants)
	ret0, _ := ret[0].([]*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockFaucetAgentMockRecorder) Search(ctx, filters, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFaucetAgent)(nil).Search), ctx, filters, tenants)
}

// Delete mocks base method
func (m *MockFaucetAgent) Delete(ctx context.Context, faucet *entities.Faucet, tenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, faucet, tenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFaucetAgentMockRecorder) Delete(ctx, faucet, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFaucetAgent)(nil).Delete), ctx, faucet, tenants)
}

// MockChainAgent is a mock of ChainAgent interface
type MockChainAgent struct {
	ctrl     *gomock.Controller
	recorder *MockChainAgentMockRecorder
}

// MockChainAgentMockRecorder is the mock recorder for MockChainAgent
type MockChainAgentMockRecorder struct {
	mock *MockChainAgent
}

// NewMockChainAgent creates a new mock instance
func NewMockChainAgent(ctrl *gomock.Controller) *MockChainAgent {
	mock := &MockChainAgent{ctrl: ctrl}
	mock.recorder = &MockChainAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainAgent) EXPECT() *MockChainAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockChainAgent) Insert(ctx context.Context, chain *entities.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockChainAgentMockRecorder) Insert(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockChainAgent)(nil).Insert), ctx, chain)
}

// Update mocks base method
func (m *MockChainAgent) Update(ctx context.Context, chain *entities.Chain, tenants []string, ownerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, chain, tenants, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockChainAgentMockRecorder) Update(ctx, chain, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChainAgent)(nil).Update), ctx, chain, tenants, ownerID)
}

// Search mocks base method
func (m *MockChainAgent) Search(ctx context.Context, filters *entities.ChainFilters, tenants []string, ownerID string) ([]*entities.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants, ownerID)
	ret0, _ := ret[0].([]*entities.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockChainAgentMockRecorder) Search(ctx, filters, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockChainAgent)(nil).Search), ctx, filters, tenants, ownerID)
}

// FindOneByUUID mocks base method
func (m *MockChainAgent) FindOneByUUID(ctx context.Context, uuid string, tenants []string, ownerID string) (*entities.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, uuid, tenants, ownerID)
	ret0, _ := ret[0].(*entities.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID
func (mr *MockChainAgentMockRecorder) FindOneByUUID(ctx, uuid, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockChainAgent)(nil).FindOneByUUID), ctx, uuid, tenants, ownerID)
}

// FindOneByName mocks base method
func (m *MockChainAgent) FindOneByName(ctx context.Context, name string, tenants []string, ownerID string) (*entities.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", ctx, name, tenants, ownerID)
	ret0, _ := ret[0].(*entities.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName
func (mr *MockChainAgentMockRecorder) FindOneByName(ctx, name, tenants, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockChainAgent)(nil).FindOneByName), ctx, name, tenants, ownerID)
}

// Delete mocks base method
func (m *MockChainAgent) Delete(ctx context.Context, chain *entities.Chain, tenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, chain, tenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChainAgentMockRecorder) Delete(ctx, chain, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChainAgent)(nil).Delete), ctx, chain, tenants)
}

// MockPrivateTxManagerAgent is a mock of PrivateTxManagerAgent interface
type MockPrivateTxManagerAgent struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateTxManagerAgentMockRecorder
}

// MockPrivateTxManagerAgentMockRecorder is the mock recorder for MockPrivateTxManagerAgent
type MockPrivateTxManagerAgentMockRecorder struct {
	mock *MockPrivateTxManagerAgent
}

// NewMockPrivateTxManagerAgent creates a new mock instance
func NewMockPrivateTxManagerAgent(ctrl *gomock.Controller) *MockPrivateTxManagerAgent {
	mock := &MockPrivateTxManagerAgent{ctrl: ctrl}
	mock.recorder = &MockPrivateTxManagerAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateTxManagerAgent) EXPECT() *MockPrivateTxManagerAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockPrivateTxManagerAgent) Insert(ctx context.Context, privateTxManager *entities.PrivateTxManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, privateTxManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPrivateTxManagerAgentMockRecorder) Insert(ctx, privateTxManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPrivateTxManagerAgent)(nil).Insert), ctx, privateTxManager)
}

// Update mocks base method
func (m *MockPrivateTxManagerAgent) Update(ctx context.Context, privateTxManager *entities.PrivateTxManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, privateTxManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPrivateTxManagerAgentMockRecorder) Update(ctx, privateTxManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPrivateTxManagerAgent)(nil).Update), ctx, privateTxManager)
}

// Search mocks base method
func (m *MockPrivateTxManagerAgent) Search(ctx context.Context, chainUUID string) ([]*entities.PrivateTxManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, chainUUID)
	ret0, _ := ret[0].([]*entities.PrivateTxManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockPrivateTxManagerAgentMockRecorder) Search(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPrivateTxManagerAgent)(nil).Search), ctx, chainUUID)
}

// Delete mocks base method
func (m *MockPrivateTxManagerAgent) Delete(ctx context.Context, privateTxManagerUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, privateTxManagerUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPrivateTxManagerAgentMockRecorder) Delete(ctx, privateTxManagerUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrivateTxManagerAgent)(nil).Delete), ctx, privateTxManagerUUID)
}

// MockContractAgent is a mock of ContractAgent interface
type MockContractAgent struct {
	ctrl     *gomock.Controller
	recorder *MockContractAgentMockRecorder
}

// MockContractAgentMockRecorder is the mock recorder for MockContractAgent
type MockContractAgentMockRecorder struct {
	mock *MockContractAgent
}

// NewMockContractAgent creates a new mock instance
func NewMockContractAgent(ctrl *gomock.Controller) *MockContractAgent {
	mock := &MockContractAgent{ctrl: ctrl}
	mock.recorder = &MockContractAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractAgent) EXPECT() *MockContractAgentMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockContractAgent) Register(ctx context.Context, contract *entities.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockContractAgentMockRecorder) Register(ctx, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockContractAgent)(nil).Register), ctx, contract)
}

// RegisterDeployment mocks base method
func (m *MockContractAgent) RegisterDeployment(ctx context.Context, chainID string, address common.Address, codeHash hexutil.Bytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDeployment", ctx, chainID, address, codeHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDeployment indicates an expected call of RegisterDeployment
func (mr *MockContractAgentMockRecorder) RegisterDeployment(ctx, chainID, address, codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDeployment", reflect.TypeOf((*MockContractAgent)(nil).RegisterDeployment), ctx, chainID, address, codeHash)
}

// FindOneByNameAndTag mocks base method
func (m *MockContractAgent) FindOneByNameAndTag(ctx context.Context, name, tag string) (*entities.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByNameAndTag", ctx, name, tag)
	ret0, _ := ret[0].(*entities.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByNameAndTag indicates an expected call of FindOneByNameAndTag
func (mr *MockContractAgentMockRecorder) FindOneByNameAndTag(ctx, name, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByNameAndTag", reflect.TypeOf((*MockContractAgent)(nil).FindOneByNameAndTag), ctx, name, tag)
}

// FindOneByCodeHash mocks base method
func (m *MockContractAgent) FindOneByCodeHash(ctx context.Context, codeHash string) (*entities.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByCodeHash", ctx, codeHash)
	ret0, _ := ret[0].(*entities.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByCodeHash indicates an expected call of FindOneByCodeHash
func (mr *MockContractAgentMockRecorder) FindOneByCodeHash(ctx, codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByCodeHash", reflect.TypeOf((*MockContractAgent)(nil).FindOneByCodeHash), ctx, codeHash)
}

// FindOneByAddress mocks base method
func (m *MockContractAgent) FindOneByAddress(ctx context.Context, address string) (*entities.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByAddress", ctx, address)
	ret0, _ := ret[0].(*entities.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByAddress indicates an expected call of FindOneByAddress
func (mr *MockContractAgentMockRecorder) FindOneByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByAddress", reflect.TypeOf((*MockContractAgent)(nil).FindOneByAddress), ctx, address)
}

// ListNames mocks base method
func (m *MockContractAgent) ListNames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNames indicates an expected call of ListNames
func (mr *MockContractAgentMockRecorder) ListNames(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNames", reflect.TypeOf((*MockContractAgent)(nil).ListNames), ctx)
}

// ListTags mocks base method
func (m *MockContractAgent) ListTags(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockContractAgentMockRecorder) ListTags(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockContractAgent)(nil).ListTags), ctx, name)
}

// MockContractEventAgent is a mock of ContractEventAgent interface
type MockContractEventAgent struct {
	ctrl     *gomock.Controller
	recorder *MockContractEventAgentMockRecorder
}

// MockContractEventAgentMockRecorder is the mock recorder for MockContractEventAgent
type MockContractEventAgentMockRecorder struct {
	mock *MockContractEventAgent
}

// NewMockContractEventAgent creates a new mock instance
func NewMockContractEventAgent(ctrl *gomock.Controller) *MockContractEventAgent {
	mock := &MockContractEventAgent{ctrl: ctrl}
	mock.recorder = &MockContractEventAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractEventAgent) EXPECT() *MockContractEventAgentMockRecorder {
	return m.recorder
}

// RegisterMultiple mocks base method
func (m *MockContractEventAgent) RegisterMultiple(ctx context.Context, events []*entities.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMultiple", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMultiple indicates an expected call of RegisterMultiple
func (mr *MockContractEventAgentMockRecorder) RegisterMultiple(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMultiple", reflect.TypeOf((*MockContractEventAgent)(nil).RegisterMultiple), ctx, events)
}

// FindOneByAccountAndSigHash mocks base method
func (m *MockContractEventAgent) FindOneByAccountAndSigHash(ctx context.Context, chainID, address, sighash string, indexedInputCount uint32) (*entities.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByAccountAndSigHash", ctx, chainID, address, sighash, indexedInputCount)
	ret0, _ := ret[0].(*entities.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByAccountAndSigHash indicates an expected call of FindOneByAccountAndSigHash
func (mr *MockContractEventAgentMockRecorder) FindOneByAccountAndSigHash(ctx, chainID, address, sighash, indexedInputCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByAccountAndSigHash", reflect.TypeOf((*MockContractEventAgent)(nil).FindOneByAccountAndSigHash), ctx, chainID, address, sighash, indexedInputCount)
}

// FindDefaultBySigHash mocks base method
func (m *MockContractEventAgent) FindDefaultBySigHash(ctx context.Context, sighash string, indexedInputCount uint32) ([]*entities.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDefaultBySigHash", ctx, sighash, indexedInputCount)
	ret0, _ := ret[0].([]*entities.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDefaultBySigHash indicates an expected call of FindDefaultBySigHash
func (mr *MockContractEventAgentMockRecorder) FindDefaultBySigHash(ctx, sighash, indexedInputCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDefaultBySigHash", reflect.TypeOf((*MockContractEventAgent)(nil).FindDefaultBySigHash), ctx, sighash, indexedInputCount)
}
