// Code generated by MockGen. DO NOT EDIT.
// Source: event_streams.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multitenancy "github.com/consensys/orchestrate/pkg/toolkit/app/multitenancy"
	usecases "github.com/consensys/orchestrate/src/api/business/use-cases"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventStreamsUseCases is a mock of EventStreamsUseCases interface
type MockEventStreamsUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamsUseCasesMockRecorder
}

// MockEventStreamsUseCasesMockRecorder is the mock recorder for MockEventStreamsUseCases
type MockEventStreamsUseCasesMockRecorder struct {
	mock *MockEventStreamsUseCases
}

// NewMockEventStreamsUseCases creates a new mock instance
func NewMockEventStreamsUseCases(ctrl *gomock.Controller) *MockEventStreamsUseCases {
	mock := &MockEventStreamsUseCases{ctrl: ctrl}
	mock.recorder = &MockEventStreamsUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventStreamsUseCases) EXPECT() *MockEventStreamsUseCasesMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEventStreamsUseCases) Create() usecases.CreateEventStreamUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(usecases.CreateEventStreamUseCase)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEventStreamsUseCasesMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Create))
}

// Search mocks base method
func (m *MockEventStreamsUseCases) Search() usecases.SearchEventStreamsUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].(usecases.SearchEventStreamsUseCase)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockEventStreamsUseCasesMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Search))
}

// MockCreateEventStreamUseCase is a mock of CreateEventStreamUseCase interface
type MockCreateEventStreamUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateEventStreamUseCaseMockRecorder
}

// MockCreateEventStreamUseCaseMockRecorder is the mock recorder for MockCreateEventStreamUseCase
type MockCreateEventStreamUseCaseMockRecorder struct {
	mock *MockCreateEventStreamUseCase
}

// NewMockCreateEventStreamUseCase creates a new mock instance
func NewMockCreateEventStreamUseCase(ctrl *gomock.Controller) *MockCreateEventStreamUseCase {
	mock := &MockCreateEventStreamUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateEventStreamUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateEventStreamUseCase) EXPECT() *MockCreateEventStreamUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateEventStreamUseCase) Execute(ctx context.Context, eventStream *entities.EventStream, userInfo *multitenancy.UserInfo) (*entities.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, eventStream, userInfo)
	ret0, _ := ret[0].(*entities.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateEventStreamUseCaseMockRecorder) Execute(ctx, eventStream, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateEventStreamUseCase)(nil).Execute), ctx, eventStream, userInfo)
}

// MockSearchEventStreamsUseCase is a mock of SearchEventStreamsUseCase interface
type MockSearchEventStreamsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchEventStreamsUseCaseMockRecorder
}

// MockSearchEventStreamsUseCaseMockRecorder is the mock recorder for MockSearchEventStreamsUseCase
type MockSearchEventStreamsUseCaseMockRecorder struct {
	mock *MockSearchEventStreamsUseCase
}

// NewMockSearchEventStreamsUseCase creates a new mock instance
func NewMockSearchEventStreamsUseCase(ctrl *gomock.Controller) *MockSearchEventStreamsUseCase {
	mock := &MockSearchEventStreamsUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchEventStreamsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchEventStreamsUseCase) EXPECT() *MockSearchEventStreamsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSearchEventStreamsUseCase) Execute(ctx context.Context, filters *entities.EventStreamFilters, userInfo *multitenancy.UserInfo) ([]*entities.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, filters, userInfo)
	ret0, _ := ret[0].([]*entities.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSearchEventStreamsUseCaseMockRecorder) Execute(ctx, filters, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSearchEventStreamsUseCase)(nil).Execute), ctx, filters, userInfo)
}
