// Code generated by MockGen. DO NOT EDIT.
// Source: event_streams.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multitenancy "github.com/consensys/orchestrate/pkg/toolkit/app/multitenancy"
	usecases "github.com/consensys/orchestrate/src/api/business/use-cases"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventStreamsUseCases is a mock of EventStreamsUseCases interface
type MockEventStreamsUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamsUseCasesMockRecorder
}

// MockEventStreamsUseCasesMockRecorder is the mock recorder for MockEventStreamsUseCases
type MockEventStreamsUseCasesMockRecorder struct {
	mock *MockEventStreamsUseCases
}

// NewMockEventStreamsUseCases creates a new mock instance
func NewMockEventStreamsUseCases(ctrl *gomock.Controller) *MockEventStreamsUseCases {
	mock := &MockEventStreamsUseCases{ctrl: ctrl}
	mock.recorder = &MockEventStreamsUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventStreamsUseCases) EXPECT() *MockEventStreamsUseCasesMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockEventStreamsUseCases) Get() usecases.GetEventStreamUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(usecases.GetEventStreamUseCase)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockEventStreamsUseCasesMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Get))
}

// Create mocks base method
func (m *MockEventStreamsUseCases) Create() usecases.CreateEventStreamUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(usecases.CreateEventStreamUseCase)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEventStreamsUseCasesMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Create))
}

// Update mocks base method
func (m *MockEventStreamsUseCases) Update() usecases.UpdateEventStreamUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(usecases.UpdateEventStreamUseCase)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEventStreamsUseCasesMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Update))
}

// Search mocks base method
func (m *MockEventStreamsUseCases) Search() usecases.SearchEventStreamsUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].(usecases.SearchEventStreamsUseCase)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockEventStreamsUseCasesMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Search))
}

// NotifyTransaction mocks base method
func (m *MockEventStreamsUseCases) NotifyTransaction() usecases.NotifyTransactionUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyTransaction")
	ret0, _ := ret[0].(usecases.NotifyTransactionUseCase)
	return ret0
}

// NotifyTransaction indicates an expected call of NotifyTransaction
func (mr *MockEventStreamsUseCasesMockRecorder) NotifyTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyTransaction", reflect.TypeOf((*MockEventStreamsUseCases)(nil).NotifyTransaction))
}

// Delete mocks base method
func (m *MockEventStreamsUseCases) Delete() usecases.DeleteEventStreamUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(usecases.DeleteEventStreamUseCase)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEventStreamsUseCasesMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventStreamsUseCases)(nil).Delete))
}

// MockGetEventStreamUseCase is a mock of GetEventStreamUseCase interface
type MockGetEventStreamUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetEventStreamUseCaseMockRecorder
}

// MockGetEventStreamUseCaseMockRecorder is the mock recorder for MockGetEventStreamUseCase
type MockGetEventStreamUseCaseMockRecorder struct {
	mock *MockGetEventStreamUseCase
}

// NewMockGetEventStreamUseCase creates a new mock instance
func NewMockGetEventStreamUseCase(ctrl *gomock.Controller) *MockGetEventStreamUseCase {
	mock := &MockGetEventStreamUseCase{ctrl: ctrl}
	mock.recorder = &MockGetEventStreamUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetEventStreamUseCase) EXPECT() *MockGetEventStreamUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetEventStreamUseCase) Execute(ctx context.Context, uuid string, userInfo *multitenancy.UserInfo) (*entities.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, uuid, userInfo)
	ret0, _ := ret[0].(*entities.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetEventStreamUseCaseMockRecorder) Execute(ctx, uuid, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetEventStreamUseCase)(nil).Execute), ctx, uuid, userInfo)
}

// MockCreateEventStreamUseCase is a mock of CreateEventStreamUseCase interface
type MockCreateEventStreamUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateEventStreamUseCaseMockRecorder
}

// MockCreateEventStreamUseCaseMockRecorder is the mock recorder for MockCreateEventStreamUseCase
type MockCreateEventStreamUseCaseMockRecorder struct {
	mock *MockCreateEventStreamUseCase
}

// NewMockCreateEventStreamUseCase creates a new mock instance
func NewMockCreateEventStreamUseCase(ctrl *gomock.Controller) *MockCreateEventStreamUseCase {
	mock := &MockCreateEventStreamUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateEventStreamUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateEventStreamUseCase) EXPECT() *MockCreateEventStreamUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateEventStreamUseCase) Execute(ctx context.Context, eventStream *entities.EventStream, chainName string, userInfo *multitenancy.UserInfo) (*entities.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, eventStream, chainName, userInfo)
	ret0, _ := ret[0].(*entities.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateEventStreamUseCaseMockRecorder) Execute(ctx, eventStream, chainName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateEventStreamUseCase)(nil).Execute), ctx, eventStream, chainName, userInfo)
}

// MockUpdateEventStreamUseCase is a mock of UpdateEventStreamUseCase interface
type MockUpdateEventStreamUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateEventStreamUseCaseMockRecorder
}

// MockUpdateEventStreamUseCaseMockRecorder is the mock recorder for MockUpdateEventStreamUseCase
type MockUpdateEventStreamUseCaseMockRecorder struct {
	mock *MockUpdateEventStreamUseCase
}

// NewMockUpdateEventStreamUseCase creates a new mock instance
func NewMockUpdateEventStreamUseCase(ctrl *gomock.Controller) *MockUpdateEventStreamUseCase {
	mock := &MockUpdateEventStreamUseCase{ctrl: ctrl}
	mock.recorder = &MockUpdateEventStreamUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateEventStreamUseCase) EXPECT() *MockUpdateEventStreamUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockUpdateEventStreamUseCase) Execute(ctx context.Context, eventStream *entities.EventStream, userInfo *multitenancy.UserInfo) (*entities.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, eventStream, userInfo)
	ret0, _ := ret[0].(*entities.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockUpdateEventStreamUseCaseMockRecorder) Execute(ctx, eventStream, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateEventStreamUseCase)(nil).Execute), ctx, eventStream, userInfo)
}

// MockSearchEventStreamsUseCase is a mock of SearchEventStreamsUseCase interface
type MockSearchEventStreamsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchEventStreamsUseCaseMockRecorder
}

// MockSearchEventStreamsUseCaseMockRecorder is the mock recorder for MockSearchEventStreamsUseCase
type MockSearchEventStreamsUseCaseMockRecorder struct {
	mock *MockSearchEventStreamsUseCase
}

// NewMockSearchEventStreamsUseCase creates a new mock instance
func NewMockSearchEventStreamsUseCase(ctrl *gomock.Controller) *MockSearchEventStreamsUseCase {
	mock := &MockSearchEventStreamsUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchEventStreamsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchEventStreamsUseCase) EXPECT() *MockSearchEventStreamsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSearchEventStreamsUseCase) Execute(ctx context.Context, filters *entities.EventStreamFilters, userInfo *multitenancy.UserInfo) ([]*entities.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, filters, userInfo)
	ret0, _ := ret[0].([]*entities.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSearchEventStreamsUseCaseMockRecorder) Execute(ctx, filters, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSearchEventStreamsUseCase)(nil).Execute), ctx, filters, userInfo)
}

// MockNotifyTransactionUseCase is a mock of NotifyTransactionUseCase interface
type MockNotifyTransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyTransactionUseCaseMockRecorder
}

// MockNotifyTransactionUseCaseMockRecorder is the mock recorder for MockNotifyTransactionUseCase
type MockNotifyTransactionUseCaseMockRecorder struct {
	mock *MockNotifyTransactionUseCase
}

// NewMockNotifyTransactionUseCase creates a new mock instance
func NewMockNotifyTransactionUseCase(ctrl *gomock.Controller) *MockNotifyTransactionUseCase {
	mock := &MockNotifyTransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockNotifyTransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifyTransactionUseCase) EXPECT() *MockNotifyTransactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockNotifyTransactionUseCase) Execute(ctx context.Context, job *entities.Job, errStr string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job, errStr, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockNotifyTransactionUseCaseMockRecorder) Execute(ctx, job, errStr, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNotifyTransactionUseCase)(nil).Execute), ctx, job, errStr, userInfo)
}

// MockDeleteEventStreamUseCase is a mock of DeleteEventStreamUseCase interface
type MockDeleteEventStreamUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteEventStreamUseCaseMockRecorder
}

// MockDeleteEventStreamUseCaseMockRecorder is the mock recorder for MockDeleteEventStreamUseCase
type MockDeleteEventStreamUseCaseMockRecorder struct {
	mock *MockDeleteEventStreamUseCase
}

// NewMockDeleteEventStreamUseCase creates a new mock instance
func NewMockDeleteEventStreamUseCase(ctrl *gomock.Controller) *MockDeleteEventStreamUseCase {
	mock := &MockDeleteEventStreamUseCase{ctrl: ctrl}
	mock.recorder = &MockDeleteEventStreamUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteEventStreamUseCase) EXPECT() *MockDeleteEventStreamUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockDeleteEventStreamUseCase) Execute(ctx context.Context, uuid string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, uuid, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockDeleteEventStreamUseCaseMockRecorder) Execute(ctx, uuid, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDeleteEventStreamUseCase)(nil).Execute), ctx, uuid, userInfo)
}
