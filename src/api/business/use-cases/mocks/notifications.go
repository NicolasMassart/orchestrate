// Code generated by MockGen. DO NOT EDIT.
// Source: notifications.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	usecases "github.com/consensys/orchestrate/src/api/business/use-cases"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotificationsUseCases is a mock of NotificationsUseCases interface
type MockNotificationsUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsUseCasesMockRecorder
}

// MockNotificationsUseCasesMockRecorder is the mock recorder for MockNotificationsUseCases
type MockNotificationsUseCasesMockRecorder struct {
	mock *MockNotificationsUseCases
}

// NewMockNotificationsUseCases creates a new mock instance
func NewMockNotificationsUseCases(ctrl *gomock.Controller) *MockNotificationsUseCases {
	mock := &MockNotificationsUseCases{ctrl: ctrl}
	mock.recorder = &MockNotificationsUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationsUseCases) EXPECT() *MockNotificationsUseCasesMockRecorder {
	return m.recorder
}

// Ack mocks base method
func (m *MockNotificationsUseCases) Ack() usecases.AckNotificationUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(usecases.AckNotificationUseCase)
	return ret0
}

// Ack indicates an expected call of Ack
func (mr *MockNotificationsUseCasesMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockNotificationsUseCases)(nil).Ack))
}

// MockAckNotificationUseCase is a mock of AckNotificationUseCase interface
type MockAckNotificationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAckNotificationUseCaseMockRecorder
}

// MockAckNotificationUseCaseMockRecorder is the mock recorder for MockAckNotificationUseCase
type MockAckNotificationUseCaseMockRecorder struct {
	mock *MockAckNotificationUseCase
}

// NewMockAckNotificationUseCase creates a new mock instance
func NewMockAckNotificationUseCase(ctrl *gomock.Controller) *MockAckNotificationUseCase {
	mock := &MockAckNotificationUseCase{ctrl: ctrl}
	mock.recorder = &MockAckNotificationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAckNotificationUseCase) EXPECT() *MockAckNotificationUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockAckNotificationUseCase) Execute(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockAckNotificationUseCaseMockRecorder) Execute(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAckNotificationUseCase)(nil).Execute), ctx, uuid)
}
