// Code generated by MockGen. DO NOT EDIT.
// Source: messages.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPendingJobMessage is a mock of PendingJobMessage interface
type MockPendingJobMessage struct {
	ctrl     *gomock.Controller
	recorder *MockPendingJobMessageMockRecorder
}

// MockPendingJobMessageMockRecorder is the mock recorder for MockPendingJobMessage
type MockPendingJobMessageMockRecorder struct {
	mock *MockPendingJobMessage
}

// NewMockPendingJobMessage creates a new mock instance
func NewMockPendingJobMessage(ctrl *gomock.Controller) *MockPendingJobMessage {
	mock := &MockPendingJobMessage{ctrl: ctrl}
	mock.recorder = &MockPendingJobMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPendingJobMessage) EXPECT() *MockPendingJobMessageMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockPendingJobMessage) Execute(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockPendingJobMessageMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPendingJobMessage)(nil).Execute), ctx, job)
}
