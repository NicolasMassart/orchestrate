// Code generated by MockGen. DO NOT EDIT.
// Source: chains.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	usecases "github.com/consensys/orchestrate/src/tx-listener/tx-listener/use-cases"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChainBlockTxs is a mock of ChainBlockTxs interface
type MockChainBlockTxs struct {
	ctrl     *gomock.Controller
	recorder *MockChainBlockTxsMockRecorder
}

// MockChainBlockTxsMockRecorder is the mock recorder for MockChainBlockTxs
type MockChainBlockTxsMockRecorder struct {
	mock *MockChainBlockTxs
}

// NewMockChainBlockTxs creates a new mock instance
func NewMockChainBlockTxs(ctrl *gomock.Controller) *MockChainBlockTxs {
	mock := &MockChainBlockTxs{ctrl: ctrl}
	mock.recorder = &MockChainBlockTxsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainBlockTxs) EXPECT() *MockChainBlockTxsMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockChainBlockTxs) Execute(ctx context.Context, chainUUID string, blockNumber uint64, txHashes []*common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, chainUUID, blockNumber, txHashes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockChainBlockTxsMockRecorder) Execute(ctx, chainUUID, blockNumber, txHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockChainBlockTxs)(nil).Execute), ctx, chainUUID, blockNumber, txHashes)
}

// MockChainBlockEvents is a mock of ChainBlockEvents interface
type MockChainBlockEvents struct {
	ctrl     *gomock.Controller
	recorder *MockChainBlockEventsMockRecorder
}

// MockChainBlockEventsMockRecorder is the mock recorder for MockChainBlockEvents
type MockChainBlockEventsMockRecorder struct {
	mock *MockChainBlockEvents
}

// NewMockChainBlockEvents creates a new mock instance
func NewMockChainBlockEvents(ctrl *gomock.Controller) *MockChainBlockEvents {
	mock := &MockChainBlockEvents{ctrl: ctrl}
	mock.recorder = &MockChainBlockEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainBlockEvents) EXPECT() *MockChainBlockEventsMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockChainBlockEvents) Execute(ctx context.Context, chainUUID string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, chainUUID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockChainBlockEventsMockRecorder) Execute(ctx, chainUUID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockChainBlockEvents)(nil).Execute), ctx, chainUUID, blockNumber)
}

// MockChainUseCases is a mock of ChainUseCases interface
type MockChainUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockChainUseCasesMockRecorder
}

// MockChainUseCasesMockRecorder is the mock recorder for MockChainUseCases
type MockChainUseCasesMockRecorder struct {
	mock *MockChainUseCases
}

// NewMockChainUseCases creates a new mock instance
func NewMockChainUseCases(ctrl *gomock.Controller) *MockChainUseCases {
	mock := &MockChainUseCases{ctrl: ctrl}
	mock.recorder = &MockChainUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainUseCases) EXPECT() *MockChainUseCasesMockRecorder {
	return m.recorder
}

// ChainBlockTxsUseCase mocks base method
func (m *MockChainUseCases) ChainBlockTxsUseCase() usecases.ChainBlockTxs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainBlockTxsUseCase")
	ret0, _ := ret[0].(usecases.ChainBlockTxs)
	return ret0
}

// ChainBlockTxsUseCase indicates an expected call of ChainBlockTxsUseCase
func (mr *MockChainUseCasesMockRecorder) ChainBlockTxsUseCase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainBlockTxsUseCase", reflect.TypeOf((*MockChainUseCases)(nil).ChainBlockTxsUseCase))
}

// ChainBlockEventsUseCase mocks base method
func (m *MockChainUseCases) ChainBlockEventsUseCase() usecases.ChainBlockEvents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainBlockEventsUseCase")
	ret0, _ := ret[0].(usecases.ChainBlockEvents)
	return ret0
}

// ChainBlockEventsUseCase indicates an expected call of ChainBlockEventsUseCase
func (mr *MockChainUseCasesMockRecorder) ChainBlockEventsUseCase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainBlockEventsUseCase", reflect.TypeOf((*MockChainUseCases)(nil).ChainBlockEventsUseCase))
}
