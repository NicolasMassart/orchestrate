// Code generated by MockGen. DO NOT EDIT.
// Source: chains.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChainBlockTxsUseCase is a mock of ChainBlockTxsUseCase interface
type MockChainBlockTxsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChainBlockTxsUseCaseMockRecorder
}

// MockChainBlockTxsUseCaseMockRecorder is the mock recorder for MockChainBlockTxsUseCase
type MockChainBlockTxsUseCaseMockRecorder struct {
	mock *MockChainBlockTxsUseCase
}

// NewMockChainBlockTxsUseCase creates a new mock instance
func NewMockChainBlockTxsUseCase(ctrl *gomock.Controller) *MockChainBlockTxsUseCase {
	mock := &MockChainBlockTxsUseCase{ctrl: ctrl}
	mock.recorder = &MockChainBlockTxsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainBlockTxsUseCase) EXPECT() *MockChainBlockTxsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockChainBlockTxsUseCase) Execute(ctx context.Context, chainUUID string, blockNumber uint64, txHashes []*common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, chainUUID, blockNumber, txHashes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockChainBlockTxsUseCaseMockRecorder) Execute(ctx, chainUUID, blockNumber, txHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockChainBlockTxsUseCase)(nil).Execute), ctx, chainUUID, blockNumber, txHashes)
}
