// Code generated by MockGen. DO NOT EDIT.
// Source: sessions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	sessions "github.com/consensys/orchestrate/src/tx-listener/tx-listener/sessions"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChainSessionManager is a mock of ChainSessionManager interface
type MockChainSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockChainSessionManagerMockRecorder
}

// MockChainSessionManagerMockRecorder is the mock recorder for MockChainSessionManager
type MockChainSessionManagerMockRecorder struct {
	mock *MockChainSessionManager
}

// NewMockChainSessionManager creates a new mock instance
func NewMockChainSessionManager(ctrl *gomock.Controller) *MockChainSessionManager {
	mock := &MockChainSessionManager{ctrl: ctrl}
	mock.recorder = &MockChainSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainSessionManager) EXPECT() *MockChainSessionManagerMockRecorder {
	return m.recorder
}

// StartSession mocks base method
func (m *MockChainSessionManager) StartSession(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession
func (mr *MockChainSessionManagerMockRecorder) StartSession(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockChainSessionManager)(nil).StartSession), ctx, chainUUID)
}

// MockTxSentrySessionManager is a mock of TxSentrySessionManager interface
type MockTxSentrySessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxSentrySessionManagerMockRecorder
}

// MockTxSentrySessionManagerMockRecorder is the mock recorder for MockTxSentrySessionManager
type MockTxSentrySessionManagerMockRecorder struct {
	mock *MockTxSentrySessionManager
}

// NewMockTxSentrySessionManager creates a new mock instance
func NewMockTxSentrySessionManager(ctrl *gomock.Controller) *MockTxSentrySessionManager {
	mock := &MockTxSentrySessionManager{ctrl: ctrl}
	mock.recorder = &MockTxSentrySessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxSentrySessionManager) EXPECT() *MockTxSentrySessionManagerMockRecorder {
	return m.recorder
}

// StartSession mocks base method
func (m *MockTxSentrySessionManager) StartSession(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession
func (mr *MockTxSentrySessionManagerMockRecorder) StartSession(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockTxSentrySessionManager)(nil).StartSession), ctx, job)
}

// StopSession mocks base method
func (m *MockTxSentrySessionManager) StopSession(ctx context.Context, sessID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSession", ctx, sessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSession indicates an expected call of StopSession
func (mr *MockTxSentrySessionManagerMockRecorder) StopSession(ctx, sessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSession", reflect.TypeOf((*MockTxSentrySessionManager)(nil).StopSession), ctx, sessID)
}

// MockSessionManagers is a mock of SessionManagers interface
type MockSessionManagers struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagersMockRecorder
}

// MockSessionManagersMockRecorder is the mock recorder for MockSessionManagers
type MockSessionManagersMockRecorder struct {
	mock *MockSessionManagers
}

// NewMockSessionManagers creates a new mock instance
func NewMockSessionManagers(ctrl *gomock.Controller) *MockSessionManagers {
	mock := &MockSessionManagers{ctrl: ctrl}
	mock.recorder = &MockSessionManagersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionManagers) EXPECT() *MockSessionManagersMockRecorder {
	return m.recorder
}

// ChainSessionManager mocks base method
func (m *MockSessionManagers) ChainSessionManager() sessions.ChainSessionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainSessionManager")
	ret0, _ := ret[0].(sessions.ChainSessionManager)
	return ret0
}

// ChainSessionManager indicates an expected call of ChainSessionManager
func (mr *MockSessionManagersMockRecorder) ChainSessionManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainSessionManager", reflect.TypeOf((*MockSessionManagers)(nil).ChainSessionManager))
}

// TxSentrySessionManager mocks base method
func (m *MockSessionManagers) TxSentrySessionManager() sessions.TxSentrySessionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSentrySessionManager")
	ret0, _ := ret[0].(sessions.TxSentrySessionManager)
	return ret0
}

// TxSentrySessionManager indicates an expected call of TxSentrySessionManager
func (mr *MockSessionManagersMockRecorder) TxSentrySessionManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSentrySessionManager", reflect.TypeOf((*MockSessionManagers)(nil).TxSentrySessionManager))
}
