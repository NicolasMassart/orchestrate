// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChain is a mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockChain) Add(ctx context.Context, chain *entities.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockChainMockRecorder) Add(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockChain)(nil).Add), ctx, chain)
}

// Update mocks base method
func (m *MockChain) Update(ctx context.Context, chain *entities.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockChainMockRecorder) Update(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChain)(nil).Update), ctx, chain)
}

// Delete mocks base method
func (m *MockChain) Delete(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChainMockRecorder) Delete(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChain)(nil).Delete), ctx, chainUUID)
}

// Get mocks base method
func (m *MockChain) Get(ctx context.Context, chainUUID string) (*entities.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, chainUUID)
	ret0, _ := ret[0].(*entities.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockChainMockRecorder) Get(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChain)(nil).Get), ctx, chainUUID)
}

// MockPendingJob is a mock of PendingJob interface
type MockPendingJob struct {
	ctrl     *gomock.Controller
	recorder *MockPendingJobMockRecorder
}

// MockPendingJobMockRecorder is the mock recorder for MockPendingJob
type MockPendingJobMockRecorder struct {
	mock *MockPendingJob
}

// NewMockPendingJob creates a new mock instance
func NewMockPendingJob(ctrl *gomock.Controller) *MockPendingJob {
	mock := &MockPendingJob{ctrl: ctrl}
	mock.recorder = &MockPendingJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPendingJob) EXPECT() *MockPendingJobMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPendingJob) Add(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockPendingJobMockRecorder) Add(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPendingJob)(nil).Add), ctx, job)
}

// Remove mocks base method
func (m *MockPendingJob) Remove(ctx context.Context, jobUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, jobUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockPendingJobMockRecorder) Remove(ctx, jobUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPendingJob)(nil).Remove), ctx, jobUUID)
}

// Update mocks base method
func (m *MockPendingJob) Update(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPendingJobMockRecorder) Update(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPendingJob)(nil).Update), ctx, job)
}

// GetByTxHash mocks base method
func (m *MockPendingJob) GetByTxHash(ctx context.Context, chainUUID string, txHash *common.Hash) (*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTxHash", ctx, chainUUID, txHash)
	ret0, _ := ret[0].(*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTxHash indicates an expected call of GetByTxHash
func (mr *MockPendingJobMockRecorder) GetByTxHash(ctx, chainUUID, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTxHash", reflect.TypeOf((*MockPendingJob)(nil).GetByTxHash), ctx, chainUUID, txHash)
}

// GetJobUUID mocks base method
func (m *MockPendingJob) GetJobUUID(ctx context.Context, jobUUID string) (*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobUUID", ctx, jobUUID)
	ret0, _ := ret[0].(*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobUUID indicates an expected call of GetJobUUID
func (mr *MockPendingJobMockRecorder) GetJobUUID(ctx, jobUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobUUID", reflect.TypeOf((*MockPendingJob)(nil).GetJobUUID), ctx, jobUUID)
}

// ListPerChainUUID mocks base method
func (m *MockPendingJob) ListPerChainUUID(ctx context.Context, chainUUID string) ([]*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPerChainUUID", ctx, chainUUID)
	ret0, _ := ret[0].([]*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPerChainUUID indicates an expected call of ListPerChainUUID
func (mr *MockPendingJobMockRecorder) ListPerChainUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPerChainUUID", reflect.TypeOf((*MockPendingJob)(nil).ListPerChainUUID), ctx, chainUUID)
}

// DeletePerChainUUID mocks base method
func (m *MockPendingJob) DeletePerChainUUID(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerChainUUID", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerChainUUID indicates an expected call of DeletePerChainUUID
func (mr *MockPendingJobMockRecorder) DeletePerChainUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerChainUUID", reflect.TypeOf((*MockPendingJob)(nil).DeletePerChainUUID), ctx, chainUUID)
}

// MockRetrySessions is a mock of RetrySessions interface
type MockRetrySessions struct {
	ctrl     *gomock.Controller
	recorder *MockRetrySessionsMockRecorder
}

// MockRetrySessionsMockRecorder is the mock recorder for MockRetrySessions
type MockRetrySessionsMockRecorder struct {
	mock *MockRetrySessions
}

// NewMockRetrySessions creates a new mock instance
func NewMockRetrySessions(ctrl *gomock.Controller) *MockRetrySessions {
	mock := &MockRetrySessions{ctrl: ctrl}
	mock.recorder = &MockRetrySessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRetrySessions) EXPECT() *MockRetrySessionsMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRetrySessions) Add(ctx context.Context, sessID string, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, sessID, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockRetrySessionsMockRecorder) Add(ctx, sessID, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRetrySessions)(nil).Add), ctx, sessID, job)
}

// Remove mocks base method
func (m *MockRetrySessions) Remove(ctx context.Context, sessID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, sessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockRetrySessionsMockRecorder) Remove(ctx, sessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRetrySessions)(nil).Remove), ctx, sessID)
}

// GetByTxHash mocks base method
func (m *MockRetrySessions) GetByTxHash(ctx context.Context, chainUUID string, txHash *common.Hash) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTxHash", ctx, chainUUID, txHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTxHash indicates an expected call of GetByTxHash
func (mr *MockRetrySessionsMockRecorder) GetByTxHash(ctx, chainUUID, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTxHash", reflect.TypeOf((*MockRetrySessions)(nil).GetByTxHash), ctx, chainUUID, txHash)
}

// ListByChainUUID mocks base method
func (m *MockRetrySessions) ListByChainUUID(ctx context.Context, chainUUID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByChainUUID", ctx, chainUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByChainUUID indicates an expected call of ListByChainUUID
func (mr *MockRetrySessionsMockRecorder) ListByChainUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByChainUUID", reflect.TypeOf((*MockRetrySessions)(nil).ListByChainUUID), ctx, chainUUID)
}

// DeletePerChainUUID mocks base method
func (m *MockRetrySessions) DeletePerChainUUID(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerChainUUID", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerChainUUID indicates an expected call of DeletePerChainUUID
func (mr *MockRetrySessionsMockRecorder) DeletePerChainUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerChainUUID", reflect.TypeOf((*MockRetrySessions)(nil).DeletePerChainUUID), ctx, chainUUID)
}
