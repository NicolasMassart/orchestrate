// Code generated by MockGen. DO NOT EDIT.
// Source: listener.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	events "github.com/consensys/orchestrate/src/tx-listener/service/listener/events"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTxlistener is a mock of Txlistener interface
type MockTxlistener struct {
	ctrl     *gomock.Controller
	recorder *MockTxlistenerMockRecorder
}

// MockTxlistenerMockRecorder is the mock recorder for MockTxlistener
type MockTxlistenerMockRecorder struct {
	mock *MockTxlistener
}

// NewMockTxlistener creates a new mock instance
func NewMockTxlistener(ctrl *gomock.Controller) *MockTxlistener {
	mock := &MockTxlistener{ctrl: ctrl}
	mock.recorder = &MockTxlistenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxlistener) EXPECT() *MockTxlistenerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTxlistener) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockTxlistenerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTxlistener)(nil).Run), arg0)
}

// Close mocks base method
func (m *MockTxlistener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockTxlistenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxlistener)(nil).Close))
}

// Subscribe mocks base method
func (m *MockTxlistener) Subscribe(arg0 chan *events.Chain) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockTxlistenerMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTxlistener)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method
func (m *MockTxlistener) Unsubscribe(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockTxlistenerMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockTxlistener)(nil).Unsubscribe), arg0)
}

// MockChainBlockListener is a mock of ChainBlockListener interface
type MockChainBlockListener struct {
	ctrl     *gomock.Controller
	recorder *MockChainBlockListenerMockRecorder
}

// MockChainBlockListenerMockRecorder is the mock recorder for MockChainBlockListener
type MockChainBlockListenerMockRecorder struct {
	mock *MockChainBlockListener
}

// NewMockChainBlockListener creates a new mock instance
func NewMockChainBlockListener(ctrl *gomock.Controller) *MockChainBlockListener {
	mock := &MockChainBlockListener{ctrl: ctrl}
	mock.recorder = &MockChainBlockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainBlockListener) EXPECT() *MockChainBlockListenerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockChainBlockListener) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockChainBlockListenerMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockChainBlockListener)(nil).Run), ctx)
}

// Close mocks base method
func (m *MockChainBlockListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockChainBlockListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChainBlockListener)(nil).Close))
}

// MockChainPendingJobsListener is a mock of ChainPendingJobsListener interface
type MockChainPendingJobsListener struct {
	ctrl     *gomock.Controller
	recorder *MockChainPendingJobsListenerMockRecorder
}

// MockChainPendingJobsListenerMockRecorder is the mock recorder for MockChainPendingJobsListener
type MockChainPendingJobsListenerMockRecorder struct {
	mock *MockChainPendingJobsListener
}

// NewMockChainPendingJobsListener creates a new mock instance
func NewMockChainPendingJobsListener(ctrl *gomock.Controller) *MockChainPendingJobsListener {
	mock := &MockChainPendingJobsListener{ctrl: ctrl}
	mock.recorder = &MockChainPendingJobsListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainPendingJobsListener) EXPECT() *MockChainPendingJobsListenerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockChainPendingJobsListener) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockChainPendingJobsListenerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockChainPendingJobsListener)(nil).Run), arg0)
}

// Close mocks base method
func (m *MockChainPendingJobsListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockChainPendingJobsListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChainPendingJobsListener)(nil).Close))
}
