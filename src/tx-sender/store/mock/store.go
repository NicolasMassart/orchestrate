// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNonceSender is a mock of NonceSender interface
type MockNonceSender struct {
	ctrl     *gomock.Controller
	recorder *MockNonceSenderMockRecorder
}

// MockNonceSenderMockRecorder is the mock recorder for MockNonceSender
type MockNonceSenderMockRecorder struct {
	mock *MockNonceSender
}

// NewMockNonceSender creates a new mock instance
func NewMockNonceSender(ctrl *gomock.Controller) *MockNonceSender {
	mock := &MockNonceSender{ctrl: ctrl}
	mock.recorder = &MockNonceSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNonceSender) EXPECT() *MockNonceSenderMockRecorder {
	return m.recorder
}

// GetLastSent mocks base method
func (m *MockNonceSender) GetLastSent(key string) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSent", key)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLastSent indicates an expected call of GetLastSent
func (mr *MockNonceSenderMockRecorder) GetLastSent(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSent", reflect.TypeOf((*MockNonceSender)(nil).GetLastSent), key)
}

// IncrLastSent mocks base method
func (m *MockNonceSender) IncrLastSent(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrLastSent", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrLastSent indicates an expected call of IncrLastSent
func (mr *MockNonceSenderMockRecorder) IncrLastSent(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrLastSent", reflect.TypeOf((*MockNonceSender)(nil).IncrLastSent), key)
}

// DeleteLastSent mocks base method
func (m *MockNonceSender) DeleteLastSent(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastSent", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastSent indicates an expected call of DeleteLastSent
func (mr *MockNonceSenderMockRecorder) DeleteLastSent(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastSent", reflect.TypeOf((*MockNonceSender)(nil).DeleteLastSent), key)
}

// SetLastSent mocks base method
func (m *MockNonceSender) SetLastSent(key string, value uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastSent", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastSent indicates an expected call of SetLastSent
func (mr *MockNonceSenderMockRecorder) SetLastSent(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastSent", reflect.TypeOf((*MockNonceSender)(nil).SetLastSent), key, value)
}

// MockRecoveryTracker is a mock of RecoveryTracker interface
type MockRecoveryTracker struct {
	ctrl     *gomock.Controller
	recorder *MockRecoveryTrackerMockRecorder
}

// MockRecoveryTrackerMockRecorder is the mock recorder for MockRecoveryTracker
type MockRecoveryTrackerMockRecorder struct {
	mock *MockRecoveryTracker
}

// NewMockRecoveryTracker creates a new mock instance
func NewMockRecoveryTracker(ctrl *gomock.Controller) *MockRecoveryTracker {
	mock := &MockRecoveryTracker{ctrl: ctrl}
	mock.recorder = &MockRecoveryTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecoveryTracker) EXPECT() *MockRecoveryTrackerMockRecorder {
	return m.recorder
}

// Recovering mocks base method
func (m *MockRecoveryTracker) Recovering(key string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recovering", key)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Recovering indicates an expected call of Recovering
func (mr *MockRecoveryTrackerMockRecorder) Recovering(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recovering", reflect.TypeOf((*MockRecoveryTracker)(nil).Recovering), key)
}

// Recover mocks base method
func (m *MockRecoveryTracker) Recover(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recover", key)
}

// Recover indicates an expected call of Recover
func (mr *MockRecoveryTrackerMockRecorder) Recover(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockRecoveryTracker)(nil).Recover), key)
}

// Recovered mocks base method
func (m *MockRecoveryTracker) Recovered(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recovered", key)
}

// Recovered indicates an expected call of Recovered
func (mr *MockRecoveryTrackerMockRecorder) Recovered(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recovered", reflect.TypeOf((*MockRecoveryTracker)(nil).Recovered), key)
}
