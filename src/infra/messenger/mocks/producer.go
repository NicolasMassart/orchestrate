// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multitenancy "github.com/consensys/orchestrate/pkg/toolkit/app/multitenancy"
	entities "github.com/consensys/orchestrate/src/entities"
	service "github.com/consensys/orchestrate/src/notifier/service/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// SendJobMessage mocks base method
func (m *MockProducer) SendJobMessage(topic string, job *entities.Job, partitionKey string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJobMessage", topic, job, partitionKey, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendJobMessage indicates an expected call of SendJobMessage
func (mr *MockProducerMockRecorder) SendJobMessage(topic, job, partitionKey, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJobMessage", reflect.TypeOf((*MockProducer)(nil).SendJobMessage), topic, job, partitionKey, userInfo)
}

// SendNotificationMessage mocks base method
func (m *MockProducer) SendNotificationMessage(topic string, notif *service.NotificationMessage, partitionKey string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationMessage", topic, notif, partitionKey, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationMessage indicates an expected call of SendNotificationMessage
func (mr *MockProducerMockRecorder) SendNotificationMessage(topic, notif, partitionKey, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationMessage", reflect.TypeOf((*MockProducer)(nil).SendNotificationMessage), topic, notif, partitionKey, userInfo)
}

// SendNotificationResponse mocks base method
func (m *MockProducer) SendNotificationResponse(ctx context.Context, notif *entities.Notification, eventStream *entities.EventStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationResponse", ctx, notif, eventStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationResponse indicates an expected call of SendNotificationResponse
func (mr *MockProducerMockRecorder) SendNotificationResponse(ctx, notif, eventStream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationResponse", reflect.TypeOf((*MockProducer)(nil).SendNotificationResponse), ctx, notif, eventStream)
}

// Checker mocks base method
func (m *MockProducer) Checker() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(error)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockProducerMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockProducer)(nil).Checker))
}
