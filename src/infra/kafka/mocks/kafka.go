// Code generated by MockGen. DO NOT EDIT.
// Source: kafka.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConsumerGroup is a mock of ConsumerGroup interface
type MockConsumerGroup struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerGroupMockRecorder
}

// MockConsumerGroupMockRecorder is the mock recorder for MockConsumerGroup
type MockConsumerGroupMockRecorder struct {
	mock *MockConsumerGroup
}

// NewMockConsumerGroup creates a new mock instance
func NewMockConsumerGroup(ctrl *gomock.Controller) *MockConsumerGroup {
	mock := &MockConsumerGroup{ctrl: ctrl}
	mock.recorder = &MockConsumerGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumerGroup) EXPECT() *MockConsumerGroupMockRecorder {
	return m.recorder
}

// Consume mocks base method
func (m *MockConsumerGroup) Consume(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, topics, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume
func (mr *MockConsumerGroupMockRecorder) Consume(ctx, topics, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumerGroup)(nil).Consume), ctx, topics, handler)
}

// Errors mocks base method
func (m *MockConsumerGroup) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors
func (mr *MockConsumerGroupMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockConsumerGroup)(nil).Errors))
}

// Close mocks base method
func (m *MockConsumerGroup) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConsumerGroupMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumerGroup)(nil).Close))
}

// Checker mocks base method
func (m *MockConsumerGroup) Checker() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(error)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockConsumerGroupMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockConsumerGroup)(nil).Checker))
}

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockProducer) Send(body interface{}, topic, partitionKey string, headers map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", body, topic, partitionKey, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockProducerMockRecorder) Send(body, topic, partitionKey, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), body, topic, partitionKey, headers)
}

// Close mocks base method
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Checker mocks base method
func (m *MockProducer) Checker() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(error)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockProducerMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockProducer)(nil).Checker))
}
