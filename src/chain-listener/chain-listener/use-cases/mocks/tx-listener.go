// Code generated by MockGen. DO NOT EDIT.
// Source: tx-listener.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotifyMinedJob is a mock of NotifyMinedJob interface
type MockNotifyMinedJob struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyMinedJobMockRecorder
}

// MockNotifyMinedJobMockRecorder is the mock recorder for MockNotifyMinedJob
type MockNotifyMinedJobMockRecorder struct {
	mock *MockNotifyMinedJob
}

// NewMockNotifyMinedJob creates a new mock instance
func NewMockNotifyMinedJob(ctrl *gomock.Controller) *MockNotifyMinedJob {
	mock := &MockNotifyMinedJob{ctrl: ctrl}
	mock.recorder = &MockNotifyMinedJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifyMinedJob) EXPECT() *MockNotifyMinedJobMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockNotifyMinedJob) Execute(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockNotifyMinedJobMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNotifyMinedJob)(nil).Execute), ctx, job)
}

// MockSendNotification is a mock of SendNotification interface
type MockSendNotification struct {
	ctrl     *gomock.Controller
	recorder *MockSendNotificationMockRecorder
}

// MockSendNotificationMockRecorder is the mock recorder for MockSendNotification
type MockSendNotificationMockRecorder struct {
	mock *MockSendNotification
}

// NewMockSendNotification creates a new mock instance
func NewMockSendNotification(ctrl *gomock.Controller) *MockSendNotification {
	mock := &MockSendNotification{ctrl: ctrl}
	mock.recorder = &MockSendNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendNotification) EXPECT() *MockSendNotificationMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSendNotification) Execute(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockSendNotificationMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendNotification)(nil).Execute), ctx, job)
}

// MockRegisterDeployedContract is a mock of RegisterDeployedContract interface
type MockRegisterDeployedContract struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterDeployedContractMockRecorder
}

// MockRegisterDeployedContractMockRecorder is the mock recorder for MockRegisterDeployedContract
type MockRegisterDeployedContractMockRecorder struct {
	mock *MockRegisterDeployedContract
}

// NewMockRegisterDeployedContract creates a new mock instance
func NewMockRegisterDeployedContract(ctrl *gomock.Controller) *MockRegisterDeployedContract {
	mock := &MockRegisterDeployedContract{ctrl: ctrl}
	mock.recorder = &MockRegisterDeployedContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegisterDeployedContract) EXPECT() *MockRegisterDeployedContractMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockRegisterDeployedContract) Execute(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockRegisterDeployedContractMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegisterDeployedContract)(nil).Execute), ctx, job)
}

// MockUpdateChainHead is a mock of UpdateChainHead interface
type MockUpdateChainHead struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateChainHeadMockRecorder
}

// MockUpdateChainHeadMockRecorder is the mock recorder for MockUpdateChainHead
type MockUpdateChainHeadMockRecorder struct {
	mock *MockUpdateChainHead
}

// NewMockUpdateChainHead creates a new mock instance
func NewMockUpdateChainHead(ctrl *gomock.Controller) *MockUpdateChainHead {
	mock := &MockUpdateChainHead{ctrl: ctrl}
	mock.recorder = &MockUpdateChainHeadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateChainHead) EXPECT() *MockUpdateChainHeadMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockUpdateChainHead) Execute(ctx context.Context, chainUUID string, nextChainHead uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, chainUUID, nextChainHead)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockUpdateChainHeadMockRecorder) Execute(ctx, chainUUID, nextChainHead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateChainHead)(nil).Execute), ctx, chainUUID, nextChainHead)
}
