// Code generated by MockGen. DO NOT EDIT.
// Source: tx-sentry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRetryJobSessionManager is a mock of RetryJobSessionManager interface
type MockRetryJobSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockRetryJobSessionManagerMockRecorder
}

// MockRetryJobSessionManagerMockRecorder is the mock recorder for MockRetryJobSessionManager
type MockRetryJobSessionManagerMockRecorder struct {
	mock *MockRetryJobSessionManager
}

// NewMockRetryJobSessionManager creates a new mock instance
func NewMockRetryJobSessionManager(ctrl *gomock.Controller) *MockRetryJobSessionManager {
	mock := &MockRetryJobSessionManager{ctrl: ctrl}
	mock.recorder = &MockRetryJobSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRetryJobSessionManager) EXPECT() *MockRetryJobSessionManagerMockRecorder {
	return m.recorder
}

// StartSession mocks base method
func (m *MockRetryJobSessionManager) StartSession(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession
func (mr *MockRetryJobSessionManagerMockRecorder) StartSession(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockRetryJobSessionManager)(nil).StartSession), ctx, job)
}

// StopSession mocks base method
func (m *MockRetryJobSessionManager) StopSession(ctx context.Context, sessID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSession", ctx, sessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSession indicates an expected call of StopSession
func (mr *MockRetryJobSessionManagerMockRecorder) StopSession(ctx, sessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSession", reflect.TypeOf((*MockRetryJobSessionManager)(nil).StopSession), ctx, sessID)
}

// StopChainSessions mocks base method
func (m *MockRetryJobSessionManager) StopChainSessions(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChainSessions", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopChainSessions indicates an expected call of StopChainSessions
func (mr *MockRetryJobSessionManagerMockRecorder) StopChainSessions(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChainSessions", reflect.TypeOf((*MockRetryJobSessionManager)(nil).StopChainSessions), ctx, chainUUID)
}

// MockSendRetryJob is a mock of SendRetryJob interface
type MockSendRetryJob struct {
	ctrl     *gomock.Controller
	recorder *MockSendRetryJobMockRecorder
}

// MockSendRetryJobMockRecorder is the mock recorder for MockSendRetryJob
type MockSendRetryJobMockRecorder struct {
	mock *MockSendRetryJob
}

// NewMockSendRetryJob creates a new mock instance
func NewMockSendRetryJob(ctrl *gomock.Controller) *MockSendRetryJob {
	mock := &MockSendRetryJob{ctrl: ctrl}
	mock.recorder = &MockSendRetryJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendRetryJob) EXPECT() *MockSendRetryJobMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSendRetryJob) Execute(ctx context.Context, job *entities.Job, lastChildUUID string, nChildren int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job, lastChildUUID, nChildren)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSendRetryJobMockRecorder) Execute(ctx, job, lastChildUUID, nChildren interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendRetryJob)(nil).Execute), ctx, job, lastChildUUID, nChildren)
}
