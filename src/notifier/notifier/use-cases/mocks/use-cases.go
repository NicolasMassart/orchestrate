// Code generated by MockGen. DO NOT EDIT.
// Source: use-cases.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSendNotificationUseCase is a mock of SendNotificationUseCase interface
type MockSendNotificationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendNotificationUseCaseMockRecorder
}

// MockSendNotificationUseCaseMockRecorder is the mock recorder for MockSendNotificationUseCase
type MockSendNotificationUseCaseMockRecorder struct {
	mock *MockSendNotificationUseCase
}

// NewMockSendNotificationUseCase creates a new mock instance
func NewMockSendNotificationUseCase(ctrl *gomock.Controller) *MockSendNotificationUseCase {
	mock := &MockSendNotificationUseCase{ctrl: ctrl}
	mock.recorder = &MockSendNotificationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendNotificationUseCase) EXPECT() *MockSendNotificationUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSendNotificationUseCase) Execute(ctx context.Context, eventStream *entities.EventStream, notif *entities.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, eventStream, notif)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockSendNotificationUseCaseMockRecorder) Execute(ctx, eventStream, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendNotificationUseCase)(nil).Execute), ctx, eventStream, notif)
}
