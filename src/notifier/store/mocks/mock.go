// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotificationAgent is a mock of NotificationAgent interface
type MockNotificationAgent struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationAgentMockRecorder
}

// MockNotificationAgentMockRecorder is the mock recorder for MockNotificationAgent
type MockNotificationAgentMockRecorder struct {
	mock *MockNotificationAgent
}

// NewMockNotificationAgent creates a new mock instance
func NewMockNotificationAgent(ctrl *gomock.Controller) *MockNotificationAgent {
	mock := &MockNotificationAgent{ctrl: ctrl}
	mock.recorder = &MockNotificationAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationAgent) EXPECT() *MockNotificationAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockNotificationAgent) Insert(ctx context.Context, notif *entities.Notification) (*entities.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, notif)
	ret0, _ := ret[0].(*entities.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockNotificationAgentMockRecorder) Insert(ctx, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockNotificationAgent)(nil).Insert), ctx, notif)
}

// Update mocks base method
func (m *MockNotificationAgent) Update(ctx context.Context, notif *entities.Notification) (*entities.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, notif)
	ret0, _ := ret[0].(*entities.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNotificationAgentMockRecorder) Update(ctx, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationAgent)(nil).Update), ctx, notif)
}
