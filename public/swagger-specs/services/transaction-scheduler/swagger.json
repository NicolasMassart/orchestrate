{
    "swagger": "2.0",
    "info": {
        "description": "PegaSys Orchestrate Transaction API. Enables dynamic management of transactions",
        "title": "Transaction Scheduler API",
        "contact": {
            "name": "Contact PegaSys Orchestrate",
            "url": "https://pegasys.tech/contact/",
            "email": "support@pegasys.tech"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "paths": {
        "/jobs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of filtered jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Search jobs by provided filters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of transaction hashes",
                        "name": "tx_hashes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Chain UUID",
                        "name": "chain_uuid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Jobs found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.JobResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "annotations": {
                                            "$ref": "#/definitions/types.Annotations"
                                        },
                                        "logs": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.Log"
                                            }
                                        },
                                        "transaction": {
                                            "$ref": "#/definitions/types.ETHTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid filter in the request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new job as part of an already created schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Creates a new Job",
                "parameters": [
                    {
                        "description": "Job creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.CreateJobRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "annotations": {
                                            "$ref": "#/definitions/types.Annotations"
                                        },
                                        "transaction": {
                                            "$ref": "#/definitions/types.ETHTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created Job",
                        "schema": {
                            "$ref": "#/definitions/types.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobs/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single job by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Fetch a job by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the job",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job found",
                        "schema": {
                            "$ref": "#/definitions/types.JobResponse"
                        }
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update a specific job by UUID\nWARNING: Reserved for advanced users. Orchestrate does not recommend using this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Update job by UUID",
                "parameters": [
                    {
                        "description": "Job update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.UpdateJobRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "annotations": {
                                            "$ref": "#/definitions/types.Annotations"
                                        },
                                        "transaction": {
                                            "$ref": "#/definitions/types.ETHTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job found",
                        "schema": {
                            "$ref": "#/definitions/types.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Job in invalid state for the given status update",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobs/{uuid}/start": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Starts a specific job by UUID, effectively executing the transaction asynchronously",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Start a Job by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the job",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {},
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get all schedules",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get all schedules",
                "responses": {
                    "200": {
                        "description": "List of schedules found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ScheduleResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Creates a new Schedule",
                "parameters": [
                    {
                        "description": "Schedule creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created schedule",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.ScheduleResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.JobResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single schedule by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Fetch a schedule by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the schedule",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule found",
                        "schema": {
                            "$ref": "#/definitions/types.ScheduleResponse"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of filtered transaction requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Search transaction requests by provided filters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of idempotency keys",
                        "name": "idempotency_keys",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transaction requests found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/types.TransactionResponse"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "params": {
                                                "$ref": "#/definitions/types.ETHTransactionParams"
                                            },
                                            "schedule": {
                                                "$ref": "#/definitions/types.ScheduleResponse"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid filter in the request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/deploy-contract": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new contract deployment request\nThe transaction can be private (Tessera, Orion).\nThe transaction can be a One Time Key transaction in 0 gas private networks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a new contract deployment",
                "parameters": [
                    {
                        "description": "Deployment transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.DeployContractRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.DeployContractParams"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created deployment transaction request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.TransactionResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.ETHTransactionParams"
                                        },
                                        "schedule": {
                                            "$ref": "#/definitions/types.ScheduleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/send": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new smart contract transaction request\nThe transaction can be private (Tessera, Orion).\nThe transaction can be a One Time Key transaction in 0 gas private networks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a new contract transaction",
                "parameters": [
                    {
                        "description": "Contract transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SendTransactionRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.TransactionParams"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created contract transaction request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.TransactionResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.ETHTransactionParams"
                                        },
                                        "schedule": {
                                            "$ref": "#/definitions/types.ScheduleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/send-raw": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new raw transaction request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a raw transaction",
                "parameters": [
                    {
                        "description": "Raw transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.RawTransactionRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.RawTransactionParams"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created raw transaction request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.TransactionResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.ETHTransactionParams"
                                        },
                                        "schedule": {
                                            "$ref": "#/definitions/types.ScheduleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/transfer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new transfer request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a transfer transaction",
                "parameters": [
                    {
                        "description": "Transfer transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.TransferRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.TransferParams"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created transfer transaction request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.TransactionResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.ETHTransactionParams"
                                        },
                                        "schedule": {
                                            "$ref": "#/definitions/types.ScheduleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single transaction request by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Fetch a transaction request by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the transaction request",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction request found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.TransactionResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "$ref": "#/definitions/types.ETHTransactionParams"
                                        },
                                        "schedule": {
                                            "$ref": "#/definitions/types.ScheduleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Transaction request not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "types.Annotations": {
            "type": "object",
            "properties": {
                "chainID": {
                    "type": "string",
                    "example": "1 (mainnet)"
                },
                "oneTimeKey": {
                    "type": "boolean",
                    "example": true
                },
                "priority": {
                    "type": "string",
                    "example": "very-high"
                }
            }
        },
        "types.CreateJobRequest": {
            "type": "object",
            "required": [
                "chainUUID",
                "scheduleUUID",
                "transaction",
                "type"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "$ref": "#/definitions/types.Annotations"
                },
                "chainUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "scheduleUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "transaction": {
                    "type": "object",
                    "$ref": "#/definitions/types.ETHTransaction"
                },
                "type": {
                    "type": "string",
                    "example": "eth://ethereum/transaction"
                }
            }
        },
        "types.CreateScheduleRequest": {
            "type": "object"
        },
        "types.DeployContractParams": {
            "type": "object",
            "required": [
                "contractName"
            ],
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "contractName": {
                    "type": "string",
                    "example": "MyContract"
                },
                "contractTag": {
                    "type": "string",
                    "example": "v1.1.0"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "string",
                    "example": "21000"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "71500000 (wei)"
                },
                "oneTimeKey": {
                    "type": "boolean",
                    "example": true
                },
                "priority": {
                    "type": "string",
                    "example": "very-high"
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "protocol": {
                    "type": "string",
                    "example": "Tessera"
                },
                "value": {
                    "type": "string",
                    "example": "71500000 (wei)"
                }
            }
        },
        "types.DeployContractRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "object",
                    "$ref": "#/definitions/types.DeployContractParams"
                }
            }
        },
        "types.ETHTransaction": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "data": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "string",
                    "example": "21000"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "71500000 (wei)"
                },
                "hash": {
                    "type": "string",
                    "example": "0xd41551c714c8ec769d2edad9adc250ae955d263da161bf59142b7500eea6715e"
                },
                "nonce": {
                    "type": "string",
                    "example": "1"
                },
                "privacyGroupID": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "raw": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "value": {
                    "type": "string",
                    "example": "71500000 (wei)"
                }
            }
        },
        "types.ETHTransactionParams": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "contractName": {
                    "type": "string",
                    "example": "MyContract"
                },
                "contractTag": {
                    "type": "string",
                    "example": "v1.1.0"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "string",
                    "example": "21000"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "71500000 (wei)"
                },
                "methodSignature": {
                    "type": "string",
                    "example": "transfer(address,uint256)"
                },
                "nonce": {
                    "type": "string",
                    "example": "1"
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "protocol": {
                    "type": "string",
                    "example": "Tessera"
                },
                "raw": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "value": {
                    "type": "string",
                    "example": "71500000 (wei)"
                }
            }
        },
        "types.JobResponse": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "$ref": "#/definitions/types.Annotations"
                },
                "chainUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Log"
                    }
                },
                "scheduleUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "status": {
                    "type": "string",
                    "example": "MINED"
                },
                "transaction": {
                    "type": "object",
                    "$ref": "#/definitions/types.ETHTransaction"
                },
                "type": {
                    "type": "string",
                    "example": "eth://ethereum/transaction"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "types.Log": {
            "type": "object",
            "properties": {
                "at": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "message": {
                    "type": "string",
                    "example": "Log message"
                },
                "status": {
                    "type": "string",
                    "example": "MINED"
                }
            }
        },
        "types.RawTransactionParams": {
            "type": "object",
            "required": [
                "raw"
            ],
            "properties": {
                "raw": {
                    "type": "string",
                    "example": "0xfe378324abcde723..."
                }
            }
        },
        "types.RawTransactionRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "object",
                    "$ref": "#/definitions/types.RawTransactionParams"
                }
            }
        },
        "types.ScheduleResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobResponse"
                    }
                },
                "tenantID": {
                    "type": "string",
                    "example": "tenant_id"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "types.SendTransactionRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "object",
                    "$ref": "#/definitions/types.TransactionParams"
                }
            }
        },
        "types.TransactionParams": {
            "type": "object",
            "required": [
                "methodSignature",
                "to"
            ],
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "string",
                    "example": "21000"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "71500000 (wei)"
                },
                "methodSignature": {
                    "type": "string",
                    "example": "transfer(address,uint256)"
                },
                "oneTimeKey": {
                    "type": "boolean",
                    "example": true
                },
                "priority": {
                    "type": "string",
                    "example": "very-high"
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "protocol": {
                    "type": "string",
                    "example": "Tessera"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "value": {
                    "type": "string",
                    "example": "71500000 (wei)"
                }
            }
        },
        "types.TransactionResponse": {
            "type": "object",
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "idempotencyKey": {
                    "type": "string",
                    "example": "myIdempotencyKey"
                },
                "params": {
                    "type": "object",
                    "$ref": "#/definitions/types.ETHTransactionParams"
                },
                "schedule": {
                    "type": "object",
                    "$ref": "#/definitions/types.ScheduleResponse"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "types.TransferParams": {
            "type": "object",
            "required": [
                "from",
                "to",
                "value"
            ],
            "properties": {
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "string",
                    "example": "21000"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "71500000 (wei)"
                },
                "priority": {
                    "type": "string",
                    "example": "very-high"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "value": {
                    "type": "string",
                    "example": "71500000 (wei)"
                }
            }
        },
        "types.TransferRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "object",
                    "$ref": "#/definitions/types.TransferParams"
                }
            }
        },
        "types.UpdateJobRequest": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "$ref": "#/definitions/types.Annotations"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Update message"
                },
                "status": {
                    "type": "string",
                    "example": "MINED"
                },
                "transaction": {
                    "type": "object",
                    "$ref": "#/definitions/types.ETHTransaction"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "JWTAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Transaction requests are an abstraction over schedules and jobs representing one or more transactions executed on the Blockchain network",
            "name": "Transactions"
        },
        {
            "description": "Schedules are ordered lists of jobs executed in a predefined sequence",
            "name": "Schedules"
        },
        {
            "description": "Jobs represent a single transaction flow executed on the Blockchain network",
            "name": "Jobs"
        }
    ]
}