---
stages:
  - test
  - build

variables:
  GOPATH: ${CI_PROJECT_DIR}/.gocache
  ARTIFACT_DOWNLOAD_ATTEMPTS: 5
  RESTORE_CACHE_ATTEMPTS: 5
  # CI_DEBUG_TRACE: "true"

services:
  - docker:18-dind

before_script:
  # Change git config so we can import go packages from GitLab
  - git config --global --add url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf "git@gitlab.com:"
  - git config --global --add url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf "https://gitlab.com/"
  # Set GOPATH
  - mkdir -p ${GOPATH}
  - export PATH="${PATH}:${GOPATH}/bin:${GOROOT}/bin"
  - make tools

.docker-setup: &docker-setup
  image: docker:19
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

.build-orchestrate: &build-orchestrate
  script:
    # Build orchestrate image following http://label-schema.org/rc1/ label convention convention
    - DOCKER_BUILDKIT=1 docker build
      --label org.label-schema.schema-version="1.0.0-rc1"
      --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
      --label org.label-schema.name="${CI_PROJECT_NAME}"
      --label org.label-schema.version="branch"
      --label org.label-schema.vcs-url="${CI_PROJECT_URL}"
      --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}"
      --label org.label-schema.vendor="PegaSys"
      -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} .
    # Push images
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}

.build-e2e: &build-e2e
  script:
    # Build e2e image
    - DOCKER_BUILDKIT=1 docker build
      --label org.label-schema.schema-version="1.0.0-rc1"
      --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
      --label org.label-schema.name="${CI_PROJECT_NAME}/e2e"
      --label org.label-schema.version="branch"
      --label org.label-schema.vcs-url="${CI_PROJECT_URL}"
      --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}"
      --label org.label-schema.vendor="PegaSys"
      -f ./tests/Dockerfile
      -t ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} .
    # Push images
    - docker push ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA}

test:
  image: golang:1.13
  stage: test
  coverage: /^total:.*\s(\d+.\d+)%/
  script:
    - time make run-coverage
  services:
    - postgres:10.7-alpine
  variables:
    DB_HOST: "postgres"
  except:
    - tags

lint:
  image: golang:1.13
  stage: test
  script:
    - make lint
  except:
    - tags

race:
  image: golang:1.13
  stage: test
  script:
    - make race
  except:
    - tags

#Build orchestrate
build-orchestrate-on-branch:
  <<: *docker-setup
  <<: *build-orchestrate
  after_script:
    - docker logout $CI_REGISTRY
  only:
    - /^dev\/[a-zA-Z0-9\/\-.]*$/
    - /^feature\/[a-zA-Z0-9\/\-.]*$/
    - /^fix\/[a-zA-Z0-9\/\-.]*$/
    - /^maintenance\/[a-zA-Z0-9\/\-.]*$/
    - /^release\/[a-zA-Z0-9\/\-.]*$/

build-orchestrate-on-master:
  <<: *docker-setup
  <<: *build-orchestrate
  after_script:
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:latest
    - docker push ${CI_REGISTRY_IMAGE}:latest
    - docker logout $CI_REGISTRY
  only:
    - master

build-orchestrate-on-tag:
  <<: *docker-setup
  script:
    # `tag` doesnt build a new image, just applies tag existing commit on master
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  after_script:
    - docker logout $CI_REGISTRY
  only:
    refs:
      - tags


#Build e2e
build-e2e-on-branch:
  <<: *docker-setup
  <<: *build-e2e
  after_script:
    - docker logout $CI_REGISTRY
  only:
    - /^dev\/[a-zA-Z0-9\/\-.]*$/
    - /^feature\/[a-zA-Z0-9\/\-.]*$/
    - /^fix\/[a-zA-Z0-9\/\-.]*$/
    - /^maintenance\/[a-zA-Z0-9\/\-.]*$/
    - /^release\/[a-zA-Z0-9\/\-.]*$/

build-e2e-on-master:
  <<: *docker-setup
  <<: *build-e2e
  after_script:
    - docker tag ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/e2e:latest
    - docker push ${CI_REGISTRY_IMAGE}/e2e:latest
    - docker logout $CI_REGISTRY
  only:
    - master

build-e2e-on-tag:
  <<: *docker-setup
  script:
    # `tag` doesnt build a new image, just applies tag existing commit on master
    - docker pull ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_TAG}
    - docker push ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_TAG}
  after_script:
    - docker logout $CI_REGISTRY
  only:
    refs:
      - tags
