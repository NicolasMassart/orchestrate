---
stages:
  - test
  - build
  - release

variables:
  DOCKER_DRIVER: overlay2
  GOPATH: ${CI_PROJECT_DIR}/.gocache
  ARTIFACT_DOWNLOAD_ATTEMPTS: 5
  RESTORE_CACHE_ATTEMPTS: 5

services:
  - docker:18-dind

.go-setup: &go-setup
  image: golang:1.13
  stage: test
  before_script:
    # Set GOPATH
    - mkdir -p ${GOPATH}
    - export PATH="${PATH}:${GOPATH}/bin:${GOROOT}/bin"

.docker-setup: &docker-setup
  image: docker:19
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  after_script:
    - docker logout $CI_REGISTRY

.build-orchestrate: &build-orchestrate
  # Build orchestrate image following http://label-schema.org/rc1/ label convention convention
  - DOCKER_BUILDKIT=1 docker build
    --label org.label-schema.schema-version="1.0.0-rc1"
    --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
    --label org.label-schema.name="${CI_PROJECT_NAME}"
    --label org.label-schema.version="branch"
    --label org.label-schema.url="https://docs.orchestrate.pegasys.tech}"
    --label org.label-schema.vcs-url="${CI_PROJECT_URL}"
    --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}"
    --label org.label-schema.vendor="PegaSys"
    -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} .
  # Push images
  - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}

.build-e2e: &build-e2e
  # Build e2e image
  - DOCKER_BUILDKIT=1 docker build
    --label org.label-schema.schema-version="1.0.0-rc1"
    --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
    --label org.label-schema.name="${CI_PROJECT_NAME}/e2e"
    --label org.label-schema.version="branch"
    --label org.label-schema.url="https://docs.orchestrate.pegasys.tech}"
    --label org.label-schema.vcs-url="${CI_PROJECT_URL}"
    --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}"
    --label org.label-schema.vendor="PegaSys"
    -f ./tests/Dockerfile
    -t ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} .
  # Push images
  - docker push ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA}

test:
  <<: *go-setup
  coverage: /^total:.*\s(\d+.\d+)%/
  services:
    - postgres:10.7-alpine
  variables:
    DB_HOST: "postgres"
  script:
      - make run-coverage
  except:
    - tags

lint:
  <<: *go-setup
  script:
    - make lint-tools
    - make lint-ci
  except:
    - tags

race:
  <<: *go-setup
  script:
    - make race
  except:
    - tags

#Build orchestrate
build-orchestrate-on-branch:
  <<: *docker-setup
  script:
    - *build-orchestrate
  only:
    - /^dev\/[a-zA-Z0-9\/\-.]*$/
    - /^feature\/[a-zA-Z0-9\/\-.]*$/
    - /^fix\/[a-zA-Z0-9\/\-.]*$/
    - /^maintenance\/[a-zA-Z0-9\/\-.]*$/
    - /^release\/[a-zA-Z0-9\/\-.]*$/

build-orchestrate-on-master:
  <<: *docker-setup
  script:
    - *build-orchestrate
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:latest
    - docker push ${CI_REGISTRY_IMAGE}:latest
  only:
    - master

build-orchestrate-on-tag:
  <<: *docker-setup
  script:
    # `tag` doesnt build a new image, just applies tag existing commit on master
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  only:
    refs:
      - tags

release-orchestrate:
  image: docker:19
  stage: release
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_KEY} ${DOCKER_REGISTRY}
  script:
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${DOCKER_REGISTRY}/orchestrate:${CI_COMMIT_TAG}
    - docker push ${DOCKER_REGISTRY}/orchestrate:${CI_COMMIT_TAG}
  after_script:
    - docker logout ${DOCKER_REGISTRY}
    - docker logout $CI_REGISTRY
  only:
    refs:
      - tags
  when: manual

#Build e2e
build-e2e-on-branch:
  <<: *docker-setup
  script:
    - *build-e2e
  only:
    - /^dev\/[a-zA-Z0-9\/\-.]*$/
    - /^feature\/[a-zA-Z0-9\/\-.]*$/
    - /^fix\/[a-zA-Z0-9\/\-.]*$/
    - /^maintenance\/[a-zA-Z0-9\/\-.]*$/
    - /^release\/[a-zA-Z0-9\/\-.]*$/

build-e2e-on-master:
  <<: *docker-setup
  script:
    - *build-e2e
    - docker tag ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/e2e:latest
    - docker push ${CI_REGISTRY_IMAGE}/e2e:latest
  only:
    - master

build-e2e-on-tag:
  <<: *docker-setup
  script:
    # `tag` doesnt build a new image, just applies tag existing commit on master
    - docker pull ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_TAG}
    - docker push ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_TAG}
  only:
    refs:
      - tags

release-e2e:
  image: docker:19
  stage: release
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_KEY} ${DOCKER_REGISTRY}
  script:
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${DOCKER_REGISTRY}/e2e:${CI_COMMIT_TAG}
    - docker push ${DOCKER_REGISTRY}/e2e:${CI_COMMIT_TAG}
  after_script:
    - docker logout ${DOCKER_REGISTRY}
    - docker logout $CI_REGISTRY
  only:
    refs:
      - tags
  when: manual
