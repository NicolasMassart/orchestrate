// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockCacheManager is a mock of CacheManager interface
type MockCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockCacheManagerMockRecorder
}

// MockCacheManagerMockRecorder is the mock recorder for MockCacheManager
type MockCacheManagerMockRecorder struct {
	mock *MockCacheManager
}

// NewMockCacheManager creates a new mock instance
func NewMockCacheManager(ctrl *gomock.Controller) *MockCacheManager {
	mock := &MockCacheManager{ctrl: ctrl}
	mock.recorder = &MockCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheManager) EXPECT() *MockCacheManagerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCacheManager) Get(arg0 context.Context, arg1 string) ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheManager)(nil).Get), arg0, arg1)
}

// Set mocks base method
func (m *MockCacheManager) Set(arg0 context.Context, arg1 string, arg2 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockCacheManagerMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheManager)(nil).Set), arg0, arg1, arg2)
}

// SetWithTTL mocks base method
func (m *MockCacheManager) SetWithTTL(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithTTL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetWithTTL indicates an expected call of SetWithTTL
func (mr *MockCacheManagerMockRecorder) SetWithTTL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithTTL", reflect.TypeOf((*MockCacheManager)(nil).SetWithTTL), arg0, arg1, arg2, arg3)
}

// TTL mocks base method
func (m *MockCacheManager) TTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TTL indicates an expected call of TTL
func (mr *MockCacheManagerMockRecorder) TTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockCacheManager)(nil).TTL))
}
