// Code generated by MockGen. DO NOT EDIT.
// Source: exported.go

// Package mock is a generated GoMock package.
package mock

import (
	metrics "github.com/go-kit/kit/metrics"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	dynamic "github.com/ConsenSys/orchestrate/pkg/http/config/dynamic"
	reflect "reflect"
)

// MockHTTPMetrics is a mock of HTTPMetrics interface
type MockHTTPMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMetricsMockRecorder
}

// MockHTTPMetricsMockRecorder is the mock recorder for MockHTTPMetrics
type MockHTTPMetricsMockRecorder struct {
	mock *MockHTTPMetrics
}

// NewMockHTTPMetrics creates a new mock instance
func NewMockHTTPMetrics(ctrl *gomock.Controller) *MockHTTPMetrics {
	mock := &MockHTTPMetrics{ctrl: ctrl}
	mock.recorder = &MockHTTPMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPMetrics) EXPECT() *MockHTTPMetricsMockRecorder {
	return m.recorder
}

// RequestsCounter mocks base method
func (m *MockHTTPMetrics) RequestsCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestsCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// RequestsCounter indicates an expected call of RequestsCounter
func (mr *MockHTTPMetricsMockRecorder) RequestsCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsCounter", reflect.TypeOf((*MockHTTPMetrics)(nil).RequestsCounter))
}

// TLSRequestsCounter mocks base method
func (m *MockHTTPMetrics) TLSRequestsCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSRequestsCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// TLSRequestsCounter indicates an expected call of TLSRequestsCounter
func (mr *MockHTTPMetricsMockRecorder) TLSRequestsCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSRequestsCounter", reflect.TypeOf((*MockHTTPMetrics)(nil).TLSRequestsCounter))
}

// RequestsLatencyHistogram mocks base method
func (m *MockHTTPMetrics) RequestsLatencyHistogram() metrics.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestsLatencyHistogram")
	ret0, _ := ret[0].(metrics.Histogram)
	return ret0
}

// RequestsLatencyHistogram indicates an expected call of RequestsLatencyHistogram
func (mr *MockHTTPMetricsMockRecorder) RequestsLatencyHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsLatencyHistogram", reflect.TypeOf((*MockHTTPMetrics)(nil).RequestsLatencyHistogram))
}

// OpenConnsGauge mocks base method
func (m *MockHTTPMetrics) OpenConnsGauge() metrics.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenConnsGauge")
	ret0, _ := ret[0].(metrics.Gauge)
	return ret0
}

// OpenConnsGauge indicates an expected call of OpenConnsGauge
func (mr *MockHTTPMetricsMockRecorder) OpenConnsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConnsGauge", reflect.TypeOf((*MockHTTPMetrics)(nil).OpenConnsGauge))
}

// RetriesCounter mocks base method
func (m *MockHTTPMetrics) RetriesCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetriesCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// RetriesCounter indicates an expected call of RetriesCounter
func (mr *MockHTTPMetricsMockRecorder) RetriesCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetriesCounter", reflect.TypeOf((*MockHTTPMetrics)(nil).RetriesCounter))
}

// ServerUpGauge mocks base method
func (m *MockHTTPMetrics) ServerUpGauge() metrics.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerUpGauge")
	ret0, _ := ret[0].(metrics.Gauge)
	return ret0
}

// ServerUpGauge indicates an expected call of ServerUpGauge
func (mr *MockHTTPMetricsMockRecorder) ServerUpGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerUpGauge", reflect.TypeOf((*MockHTTPMetrics)(nil).ServerUpGauge))
}

// Switch mocks base method
func (m *MockHTTPMetrics) Switch(arg0 *dynamic.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Switch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Switch indicates an expected call of Switch
func (mr *MockHTTPMetricsMockRecorder) Switch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Switch", reflect.TypeOf((*MockHTTPMetrics)(nil).Switch), arg0)
}

// Describe mocks base method
func (m *MockHTTPMetrics) Describe(arg0 chan<- *prometheus.Desc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe
func (mr *MockHTTPMetricsMockRecorder) Describe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockHTTPMetrics)(nil).Describe), arg0)
}

// Collect mocks base method
func (m *MockHTTPMetrics) Collect(arg0 chan<- prometheus.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", arg0)
}

// Collect indicates an expected call of Collect
func (mr *MockHTTPMetricsMockRecorder) Collect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockHTTPMetrics)(nil).Collect), arg0)
}
