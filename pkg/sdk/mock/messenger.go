// Code generated by MockGen. DO NOT EDIT.
// Source: messenger.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	multitenancy "github.com/consensys/orchestrate/pkg/toolkit/app/multitenancy"
	types "github.com/consensys/orchestrate/src/api/service/types"
	entities "github.com/consensys/orchestrate/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrchestrateMessenger is a mock of OrchestrateMessenger interface
type MockOrchestrateMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestrateMessengerMockRecorder
}

// MockOrchestrateMessengerMockRecorder is the mock recorder for MockOrchestrateMessenger
type MockOrchestrateMessengerMockRecorder struct {
	mock *MockOrchestrateMessenger
}

// NewMockOrchestrateMessenger creates a new mock instance
func NewMockOrchestrateMessenger(ctrl *gomock.Controller) *MockOrchestrateMessenger {
	mock := &MockOrchestrateMessenger{ctrl: ctrl}
	mock.recorder = &MockOrchestrateMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrchestrateMessenger) EXPECT() *MockOrchestrateMessengerMockRecorder {
	return m.recorder
}

// ContractEventLogsMessage mocks base method
func (m *MockOrchestrateMessenger) ContractEventLogsMessage(ctx context.Context, req *types.EventLogsMessageRequest, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEventLogsMessage", ctx, req, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContractEventLogsMessage indicates an expected call of ContractEventLogsMessage
func (mr *MockOrchestrateMessengerMockRecorder) ContractEventLogsMessage(ctx, req, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEventLogsMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).ContractEventLogsMessage), ctx, req, userInfo)
}

// JobUpdateMessage mocks base method
func (m *MockOrchestrateMessenger) JobUpdateMessage(ctx context.Context, req *types.JobUpdateMessageRequest, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobUpdateMessage", ctx, req, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// JobUpdateMessage indicates an expected call of JobUpdateMessage
func (mr *MockOrchestrateMessengerMockRecorder) JobUpdateMessage(ctx, req, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobUpdateMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).JobUpdateMessage), ctx, req, userInfo)
}

// EventStreamSuspendMessage mocks base method
func (m *MockOrchestrateMessenger) EventStreamSuspendMessage(ctx context.Context, eventStreamUUID string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStreamSuspendMessage", ctx, eventStreamUUID, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventStreamSuspendMessage indicates an expected call of EventStreamSuspendMessage
func (mr *MockOrchestrateMessengerMockRecorder) EventStreamSuspendMessage(ctx, eventStreamUUID, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStreamSuspendMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).EventStreamSuspendMessage), ctx, eventStreamUUID, userInfo)
}

// NotificationAckMessage mocks base method
func (m *MockOrchestrateMessenger) NotificationAckMessage(ctx context.Context, notifUUID string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationAckMessage", ctx, notifUUID, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotificationAckMessage indicates an expected call of NotificationAckMessage
func (mr *MockOrchestrateMessengerMockRecorder) NotificationAckMessage(ctx, notifUUID, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationAckMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).NotificationAckMessage), ctx, notifUUID, userInfo)
}

// TransactionNotificationMessage mocks base method
func (m *MockOrchestrateMessenger) TransactionNotificationMessage(ctx context.Context, eventStream *entities.EventStream, notif *entities.Notification, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionNotificationMessage", ctx, eventStream, notif, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionNotificationMessage indicates an expected call of TransactionNotificationMessage
func (mr *MockOrchestrateMessengerMockRecorder) TransactionNotificationMessage(ctx, eventStream, notif, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionNotificationMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).TransactionNotificationMessage), ctx, eventStream, notif, userInfo)
}

// ContractEventNotificationMessage mocks base method
func (m *MockOrchestrateMessenger) ContractEventNotificationMessage(ctx context.Context, eventStream *entities.EventStream, notif *entities.Notification, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEventNotificationMessage", ctx, eventStream, notif, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContractEventNotificationMessage indicates an expected call of ContractEventNotificationMessage
func (mr *MockOrchestrateMessengerMockRecorder) ContractEventNotificationMessage(ctx, eventStream, notif, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEventNotificationMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).ContractEventNotificationMessage), ctx, eventStream, notif, userInfo)
}

// PendingJobMessage mocks base method
func (m *MockOrchestrateMessenger) PendingJobMessage(ctx context.Context, job *entities.Job, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingJobMessage", ctx, job, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// PendingJobMessage indicates an expected call of PendingJobMessage
func (mr *MockOrchestrateMessengerMockRecorder) PendingJobMessage(ctx, job, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingJobMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).PendingJobMessage), ctx, job, userInfo)
}

// CreateSubscriptionMessage mocks base method
func (m *MockOrchestrateMessenger) CreateSubscriptionMessage(ctx context.Context, sub *entities.Subscription, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionMessage", ctx, sub, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriptionMessage indicates an expected call of CreateSubscriptionMessage
func (mr *MockOrchestrateMessengerMockRecorder) CreateSubscriptionMessage(ctx, sub, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).CreateSubscriptionMessage), ctx, sub, userInfo)
}

// UpdateSubscriptionMessage mocks base method
func (m *MockOrchestrateMessenger) UpdateSubscriptionMessage(ctx context.Context, sub *entities.Subscription, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionMessage", ctx, sub, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscriptionMessage indicates an expected call of UpdateSubscriptionMessage
func (mr *MockOrchestrateMessengerMockRecorder) UpdateSubscriptionMessage(ctx, sub, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).UpdateSubscriptionMessage), ctx, sub, userInfo)
}

// DeleteSubscriptionMessage mocks base method
func (m *MockOrchestrateMessenger) DeleteSubscriptionMessage(ctx context.Context, sub *entities.Subscription, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionMessage", ctx, sub, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionMessage indicates an expected call of DeleteSubscriptionMessage
func (mr *MockOrchestrateMessengerMockRecorder) DeleteSubscriptionMessage(ctx, sub, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).DeleteSubscriptionMessage), ctx, sub, userInfo)
}

// StartedJobMessage mocks base method
func (m *MockOrchestrateMessenger) StartedJobMessage(ctx context.Context, job *entities.Job, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartedJobMessage", ctx, job, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartedJobMessage indicates an expected call of StartedJobMessage
func (mr *MockOrchestrateMessengerMockRecorder) StartedJobMessage(ctx, job, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedJobMessage", reflect.TypeOf((*MockOrchestrateMessenger)(nil).StartedJobMessage), ctx, job, userInfo)
}

// MockMessengerAPI is a mock of MessengerAPI interface
type MockMessengerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerAPIMockRecorder
}

// MockMessengerAPIMockRecorder is the mock recorder for MockMessengerAPI
type MockMessengerAPIMockRecorder struct {
	mock *MockMessengerAPI
}

// NewMockMessengerAPI creates a new mock instance
func NewMockMessengerAPI(ctrl *gomock.Controller) *MockMessengerAPI {
	mock := &MockMessengerAPI{ctrl: ctrl}
	mock.recorder = &MockMessengerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessengerAPI) EXPECT() *MockMessengerAPIMockRecorder {
	return m.recorder
}

// ContractEventLogsMessage mocks base method
func (m *MockMessengerAPI) ContractEventLogsMessage(ctx context.Context, req *types.EventLogsMessageRequest, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEventLogsMessage", ctx, req, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContractEventLogsMessage indicates an expected call of ContractEventLogsMessage
func (mr *MockMessengerAPIMockRecorder) ContractEventLogsMessage(ctx, req, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEventLogsMessage", reflect.TypeOf((*MockMessengerAPI)(nil).ContractEventLogsMessage), ctx, req, userInfo)
}

// JobUpdateMessage mocks base method
func (m *MockMessengerAPI) JobUpdateMessage(ctx context.Context, req *types.JobUpdateMessageRequest, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobUpdateMessage", ctx, req, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// JobUpdateMessage indicates an expected call of JobUpdateMessage
func (mr *MockMessengerAPIMockRecorder) JobUpdateMessage(ctx, req, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobUpdateMessage", reflect.TypeOf((*MockMessengerAPI)(nil).JobUpdateMessage), ctx, req, userInfo)
}

// EventStreamSuspendMessage mocks base method
func (m *MockMessengerAPI) EventStreamSuspendMessage(ctx context.Context, eventStreamUUID string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStreamSuspendMessage", ctx, eventStreamUUID, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventStreamSuspendMessage indicates an expected call of EventStreamSuspendMessage
func (mr *MockMessengerAPIMockRecorder) EventStreamSuspendMessage(ctx, eventStreamUUID, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStreamSuspendMessage", reflect.TypeOf((*MockMessengerAPI)(nil).EventStreamSuspendMessage), ctx, eventStreamUUID, userInfo)
}

// NotificationAckMessage mocks base method
func (m *MockMessengerAPI) NotificationAckMessage(ctx context.Context, notifUUID string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationAckMessage", ctx, notifUUID, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotificationAckMessage indicates an expected call of NotificationAckMessage
func (mr *MockMessengerAPIMockRecorder) NotificationAckMessage(ctx, notifUUID, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationAckMessage", reflect.TypeOf((*MockMessengerAPI)(nil).NotificationAckMessage), ctx, notifUUID, userInfo)
}

// MockMessengerNotifier is a mock of MessengerNotifier interface
type MockMessengerNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerNotifierMockRecorder
}

// MockMessengerNotifierMockRecorder is the mock recorder for MockMessengerNotifier
type MockMessengerNotifierMockRecorder struct {
	mock *MockMessengerNotifier
}

// NewMockMessengerNotifier creates a new mock instance
func NewMockMessengerNotifier(ctrl *gomock.Controller) *MockMessengerNotifier {
	mock := &MockMessengerNotifier{ctrl: ctrl}
	mock.recorder = &MockMessengerNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessengerNotifier) EXPECT() *MockMessengerNotifierMockRecorder {
	return m.recorder
}

// TransactionNotificationMessage mocks base method
func (m *MockMessengerNotifier) TransactionNotificationMessage(ctx context.Context, eventStream *entities.EventStream, notif *entities.Notification, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionNotificationMessage", ctx, eventStream, notif, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionNotificationMessage indicates an expected call of TransactionNotificationMessage
func (mr *MockMessengerNotifierMockRecorder) TransactionNotificationMessage(ctx, eventStream, notif, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionNotificationMessage", reflect.TypeOf((*MockMessengerNotifier)(nil).TransactionNotificationMessage), ctx, eventStream, notif, userInfo)
}

// ContractEventNotificationMessage mocks base method
func (m *MockMessengerNotifier) ContractEventNotificationMessage(ctx context.Context, eventStream *entities.EventStream, notif *entities.Notification, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEventNotificationMessage", ctx, eventStream, notif, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContractEventNotificationMessage indicates an expected call of ContractEventNotificationMessage
func (mr *MockMessengerNotifierMockRecorder) ContractEventNotificationMessage(ctx, eventStream, notif, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEventNotificationMessage", reflect.TypeOf((*MockMessengerNotifier)(nil).ContractEventNotificationMessage), ctx, eventStream, notif, userInfo)
}

// MockMessengerTxListener is a mock of MessengerTxListener interface
type MockMessengerTxListener struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerTxListenerMockRecorder
}

// MockMessengerTxListenerMockRecorder is the mock recorder for MockMessengerTxListener
type MockMessengerTxListenerMockRecorder struct {
	mock *MockMessengerTxListener
}

// NewMockMessengerTxListener creates a new mock instance
func NewMockMessengerTxListener(ctrl *gomock.Controller) *MockMessengerTxListener {
	mock := &MockMessengerTxListener{ctrl: ctrl}
	mock.recorder = &MockMessengerTxListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessengerTxListener) EXPECT() *MockMessengerTxListenerMockRecorder {
	return m.recorder
}

// PendingJobMessage mocks base method
func (m *MockMessengerTxListener) PendingJobMessage(ctx context.Context, job *entities.Job, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingJobMessage", ctx, job, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// PendingJobMessage indicates an expected call of PendingJobMessage
func (mr *MockMessengerTxListenerMockRecorder) PendingJobMessage(ctx, job, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingJobMessage", reflect.TypeOf((*MockMessengerTxListener)(nil).PendingJobMessage), ctx, job, userInfo)
}

// CreateSubscriptionMessage mocks base method
func (m *MockMessengerTxListener) CreateSubscriptionMessage(ctx context.Context, sub *entities.Subscription, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionMessage", ctx, sub, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriptionMessage indicates an expected call of CreateSubscriptionMessage
func (mr *MockMessengerTxListenerMockRecorder) CreateSubscriptionMessage(ctx, sub, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionMessage", reflect.TypeOf((*MockMessengerTxListener)(nil).CreateSubscriptionMessage), ctx, sub, userInfo)
}

// UpdateSubscriptionMessage mocks base method
func (m *MockMessengerTxListener) UpdateSubscriptionMessage(ctx context.Context, sub *entities.Subscription, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionMessage", ctx, sub, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscriptionMessage indicates an expected call of UpdateSubscriptionMessage
func (mr *MockMessengerTxListenerMockRecorder) UpdateSubscriptionMessage(ctx, sub, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionMessage", reflect.TypeOf((*MockMessengerTxListener)(nil).UpdateSubscriptionMessage), ctx, sub, userInfo)
}

// DeleteSubscriptionMessage mocks base method
func (m *MockMessengerTxListener) DeleteSubscriptionMessage(ctx context.Context, sub *entities.Subscription, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionMessage", ctx, sub, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionMessage indicates an expected call of DeleteSubscriptionMessage
func (mr *MockMessengerTxListenerMockRecorder) DeleteSubscriptionMessage(ctx, sub, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionMessage", reflect.TypeOf((*MockMessengerTxListener)(nil).DeleteSubscriptionMessage), ctx, sub, userInfo)
}

// MockMessengerTxSender is a mock of MessengerTxSender interface
type MockMessengerTxSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerTxSenderMockRecorder
}

// MockMessengerTxSenderMockRecorder is the mock recorder for MockMessengerTxSender
type MockMessengerTxSenderMockRecorder struct {
	mock *MockMessengerTxSender
}

// NewMockMessengerTxSender creates a new mock instance
func NewMockMessengerTxSender(ctrl *gomock.Controller) *MockMessengerTxSender {
	mock := &MockMessengerTxSender{ctrl: ctrl}
	mock.recorder = &MockMessengerTxSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessengerTxSender) EXPECT() *MockMessengerTxSenderMockRecorder {
	return m.recorder
}

// StartedJobMessage mocks base method
func (m *MockMessengerTxSender) StartedJobMessage(ctx context.Context, job *entities.Job, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartedJobMessage", ctx, job, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartedJobMessage indicates an expected call of StartedJobMessage
func (mr *MockMessengerTxSenderMockRecorder) StartedJobMessage(ctx, job, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedJobMessage", reflect.TypeOf((*MockMessengerTxSender)(nil).StartedJobMessage), ctx, job, userInfo)
}
