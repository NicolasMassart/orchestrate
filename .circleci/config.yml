version: 2.1

orbs:
  go: circleci/go@1.5.0
  sonarcloud: sonarsource/sonarcloud@1.0.1
  wait-for: cobli/wait-for@1.0.0

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    steps:
      - run:
          name: Docker login
          command: |
            echo "Login in cloudsmith"
            echo $CLOUDSMITH_PASS_RW | docker login docker.consensys.net -u $CLOUDSMITH_USER_RW --password-stdin
            echo "Login in docker.io"
            echo $DOCKER_PASSWORD_RW | docker login docker.io -u $DOCKER_USER_RW --password-stdin
      - run:
          name: DCT signing setup
          command: |
            mkdir -p $HOME/.docker/trust/private
            echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
            chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
            docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name opsquorum

  prepare_docker_buildx:
    description: "Docker buildx setup"
    parameters:
      qemu-user-static-version:
        default: 6.1.0-8
        description: The version of qemu-user-static to use.
        type: string
      version:
        default: 0.7.1
        description: The version of buildx to install.
        type: string
    steps:
      - run:
          name: Install Docker buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            wget "https://github.com/docker/buildx/releases/download/v<< parameters.version >>/buildx-v<< parameters.version >>.linux-amd64" -O ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run:
          name: Start multiarch/qemu-user-static container
          command: |
            docker run --rm --privileged multiarch/qemu-user-static:<< parameters.qemu-user-static-version >> --reset -p yes
      - run:
          name: Create docker-multiarch builder
          command: |
            docker context create docker-multiarch
            DOCKER_CONTEXT=$(docker buildx create --use docker-multiarch --platform linux/amd64,linux/arm64)
            docker buildx inspect --builder ${DOCKER_CONTEXT} --bootstrap
            docker buildx use ${DOCKER_CONTEXT}
      - run:
          command: docker buildx install
          name: Initialize Docker buildx

  # potential remote environment values
  # - qa
  # - staging
  # potential remote namespace:
  # - staging-v21-1 (CIRCLE_TAG=v21.1.4)
  # - qa (CIRCLE_BRANCH=main)
  # - qa-v21-1 (CIRCLE_BRANCH=maintenance/v21.1)
  set_remote_environment_variables:
    description: "Set remote environment values"
    parameters:
      environment_values:
        type: string
        default: ""
      orchestrate_namespace:
        type: string
        default: ""
    steps:
      - when:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: echo 'export ENVIRONMENT_VALUES=<<parameters.environment_values>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: if [ "${CIRCLE_TAG}" ]; then echo 'export ENVIRONMENT_VALUES=staging' >> $BASH_ENV ; else echo 'export ENVIRONMENT_VALUES=qa' >> $BASH_ENV; fi
      - when:
          condition: <<parameters.orchestrate_namespace>>
          steps:
            - run:
                name: Set Orchestrate Namespace
                command: echo 'export ORCHESTRATE_NAMESPACE=<<parameters.environment_values>>' >> $BASH_ENV

      - unless:
          condition: <<parameters.orchestrate_namespace>>
          steps:
            - run:
                name: Set Orchestrate Namespace
                command: |
                  if [ "${CIRCLE_TAG}" ]; then echo 'export TAG=${CIRCLE_TAG%.*}' >> $BASH_ENV && echo 'export ORCHESTRATE_NAMESPACE=${ENVIRONMENT_VALUES}-${TAG//./-}' >> $BASH_ENV;
                  elif [ "${CIRCLE_BRANCH}" == "main" ]; then echo 'export ORCHESTRATE_NAMESPACE=${ENVIRONMENT_VALUES}' >> $BASH_ENV;
                  else echo 'export TAG=${CIRCLE_BRANCH#"maintenance/"}' >> $BASH_ENV && echo 'export ORCHESTRATE_NAMESPACE=${ENVIRONMENT_VALUES}-${TAG//./-}' >> $BASH_ENV;
                  fi

  prepare_e2e:
    description: "Orchestrate e2e environment"
    parameters:
      environment_values:
        type: string
        default: ""
      orchestrate_namespace:
        type: string
        default: ""
    steps:
      - run:
          name: Build test binary
          command: make gobuild-e2e
      - set_remote_environment_variables:
          environment_values: <<parameters.environment_values>>
          orchestrate_namespace: <<parameters.orchestrate_namespace>>
      - run:
          name: Setup QA environment variables
          command: |
            echo 'export API_URL=https://${ORCHESTRATE_NAMESPACE}.orchestrate.${REMOTE_DOMAIN_NAME}' >> $BASH_ENV
            echo 'export KAFKA_URL=${QA_KAFKA_URL}' >> $BASH_ENV
            echo 'export KAFKA_SASL_ENABLED=${QA_KAFKA_SASL_ENABLED}' >> $BASH_ENV
            echo 'export KAFKA_SASL_MECHANISM=PLAIN' >> $BASH_ENV
            echo 'export KAFKA_SASL_USER=${QA_KAFKA_SASL_USER}' >> $BASH_ENV
            echo 'export KAFKA_SASL_PASSWORD=${QA_KAFKA_SASL_PASSWORD}' >> $BASH_ENV
            echo 'export KAFKA_TLS_ENABLED=true' >> $BASH_ENV
            echo 'export KAFKA_TLS_INSECURE_SKIP_VERIFY=true' >> $BASH_ENV
            echo 'export KEY_MANAGER_URL=${QA_QUORUM_KEY_MANAGER_URL}' >> $BASH_ENV
            echo 'export KEY_MANAGER_STORE_NAME=${QA_KEY_MANAGER_STORE_NAME}' >> $BASH_ENV
            echo 'export TOPIC_TX_SENDER=${ORCHESTRATE_NAMESPACE}-tx-sender' >> $BASH_ENV
            echo 'export TOPIC_TX_RECOVER=${ORCHESTRATE_NAMESPACE}-tx-recover' >> $BASH_ENV
            echo 'export TOPIC_TX_DECODED=${ORCHESTRATE_NAMESPACE}-tx-decoded' >> $BASH_ENV
            echo 'export MULTI_TENANCY_ENABLED=${QA_MULTI_TENANCY_ENABLED}' >> $BASH_ENV
            echo 'export AUTH_API_KEY=${QA_AUTH_API_KEY}' >> $BASH_ENV
            echo 'export AUTH_JWT_ISSUER_URL=${QA_AUTH_JWT_ISSUER_URL}' >> $BASH_ENV
            echo 'export TEST_GLOBAL_DATA=${QA_TEST_GLOBAL_DATA}' >> $BASH_ENV
            echo 'export CUCUMBER_CONCURRENCY=${QA_CUCUMBER_CONCURRENCY}' >> $BASH_ENV

jobs:
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild

  test:
    docker:
      - image: cimg/go:1.16.8
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make ci-run-coverage-unit
      - store_test_results:
          path: ./build/coverage/unit.out
      - store_artifacts:
          path: ./build/coverage/unit.html
          destination: unit-coverage.html
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  race:
    docker:
      - image: cimg/go:1.16.8
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Run unit tests (race)
          command: make run-race

  integration:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Integration tests
          command: make run-coverage-integration
      - store_test_results:
          path: ./build/coverage/integration.out
      - store_artifacts:
          path: ./build/coverage/integration.html
          destination: integration-coverage.html
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  sonarscan:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: List coverage files
          command: ls -la ./build/coverage
      - sonarcloud/scan

  build-docker-image:
    docker:
      - image: cimg/base:2021.12
    resource_class: xlarge

    parameters: # parameters are at the job level
      docker-image-platform:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-image-tag:
        type: string
      docker-image-sign:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - prepare_docker_buildx
      - run:
          name: Build, push and sign images
          no_output_timeout: 90m
          command: |
            export DOCKER_IMAGE_SIGN="<< parameters.docker-image-sign >>"
            export DOCKER_IMAGE_PLATFORM="<< parameters.docker-image-platform >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_REF="<< parameters.docker-image-registry >>/<< parameters.docker-image-tag >>"

            TARGETOS="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 1)"
            TARGETARCH="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 2)"

            if [ $TARGETOS != "linux" ]; then
              echo "Targeted OS not supported $TARGETOS"
              exit 1
            fi

            if [ $TARGETARCH == "amd64" ]; then
              DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}"
            else
              DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}.${TARGETARCH}"
            fi

            echo "Building image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            DOCKER_BUILDKIT=1 docker build --build-arg VERSION=${DOCKER_IMAGE_VERSION} \
             --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
             --label org.opencontainers.image.url="https://consensys.net/codefi/orchestrate/" \
             --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}" \
             --label org.opencontainers.image.version="${CIRCLE-TAG-branch}" \
             --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}" \
             --label org.opencontainers.image.vendor="ConsenSys Software Inc." \
             --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}" \
             --label org.opencontainers.image.description="Orchestrate is a blockchain Transaction Orchestration system" \
             --label org.opencontainers.image.documentation="https://docs.orchestrate.consensys.net/" \
             --label org.opencontainers.image.licenses="BUSL-1.1" \
             --platform ${DOCKER_IMAGE_PLATFORM} \
             --push -t ${DOCKER_IMAGE_TAG} \
             .

             if [ $DOCKER_IMAGE_SIGN == "true" ]; then
                echo "Waiting for few seconds for image to become available..."
                sleep 10

                echo "Pulling docker image ${DOCKER_IMAGE_TAG}..."
                docker pull "${DOCKER_IMAGE_TAG}"

                echo "Signing docker image ${DOCKER_IMAGE_TAG}..."
                docker trust sign --local "${DOCKER_IMAGE_TAG}"

                echo "Pushing docker image ${DOCKER_IMAGE_TAG}..."
                docker push "${DOCKER_IMAGE_TAG}"
             fi

  deploy-qa:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy QA environment
          command: >-
            ORCHESTRATE_TAG=${CIRCLE_SHA1:0:7}
            ORCHESTRATE_REPOSITORY=${CLOUDSMITH_DEV_REPO}/orchestrate
            REGISTRY_USERNAME=${CLOUDSMITH_USER_RW}
            REGISTRY_PASSWORD=${CLOUDSMITH_PASS_RW}
            make deploy-remote-env

  run-e2e-local:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: e2e local tests
          command: |
            set -eo
            cp .env.multitenancy .env
            make up
            echo "Wait 20 seconds for services to boot up correctly..."
            sleep 20
            make run-e2e

  run-e2e:
    docker:
      - image: cimg/go:1.16.8-node
    resource_class: large
    steps:
      - prepare_golang
      - prepare_e2e
      - wait-for/sh-command:
          seconds-between-retries: 3
          timeout: 30
          description: "deployment readiness"
          sh-command: nc -z qa.orchestrate.ops.consensys.net 443
      - run:
          name: Running e2e
          environment:
            CUCUMBER_OUTPUTPATH: "./scripts/report/report.json"
            CUCUMBER_OUTPUT: "./report.html"
            CUCUMBER_INPUT: "./report.json"
            CUCUMBER_PATHS: "./tests/features"
            ARTIFACTS_PATH: "./tests/artifacts"
            CUCUMBER_FORMAT: "cucumber"
            CUCUMBER_STEPS_TIMEOUT: "1m"
            KAFKA_CONSUMER_GROUP_NAME: "e2e"
            LOG_LEVEL: "INFO"
          command: |
            set +e
            CIRCLE_TAG=${CIRCLE_TAG}
            CIRCLE_BRANCH=${CIRCLE_BRANCH}
            CIRCLE_SHA1=${CIRCLE_SHA1}
            CIRCLE_BUILD_IMAGE=${CIRCLE_BUILD_IMAGE}
            CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL}
            CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}
            make run-e2e

  run-stress:
    docker:
      - image: cimg/go:1.16.8
    resource_class: large
    parameters:
      environment_values:
        type: string
        default: ""
      orchestrate_namespace:
        type: string
        default: ""
      stress_concurrency:
        type: string
        default: "5"
      stress_iteration:
        type: string
        default: "100"
      stress_timeout:
        type: string
        default: "10m"
    steps:
      - prepare_golang
      - prepare_e2e:
          environment_values: <<parameters.environment_values>>
          orchestrate_namespace: <<parameters.orchestrate_namespace>>
      - run:
          name: Running stress
          environment:
            ARTIFACTS_PATH: "./tests/artifacts"
            STRESS_CONCURRENCY: <<parameters.stress_concurrency>>
            STRESS_ITERATIONS: <<parameters.stress_iteration>>
            STRESS_TIMEOUT: <<parameters.stress_timeout>>
            KAFKA_CONSUMER_GROUP_NAME: "stress"
          command: ./build/bin/test stress

  deploy-staging:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy staging environment
          command: >-
            ORCHESTRATE_TAG=${CIRCLE_TAG}
            ORCHESTRATE_REPOSITORY=consensys/orchestrate
            make deploy-remote-env

workflows:
  version: 2
  default:
    jobs:
      - lint:
          filters:
            branches:
              only: /.*/
      - gobuild:
          filters:
            branches:
              only: /.*/
      - test:
          filters:
            branches:
              only: /.*/
      - race:
          filters:
            branches:
              only: /.*/
      - integration:
          filters:
            branches:
              only: /.*/
      - sonarscan:
          filters:
            branches:
              only: /.*/
          requires:
            - test
            - race
            - integration
      - build-docker-image: # Push Dev image
          name: push-orchestrate-image-<< matrix.docker-image-tag >>
          matrix:
            parameters:
              docker-image-tag: ["orchestrate:${CIRCLE_SHA1:0:7}", "orchestrate:develop"]
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-platform: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          filters:
            branches:
              only: main
          requires:
            - gobuild
      - wait-for-approval:
          type: approval
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-docker-image: # Push prod image
          name: release-tag-<< matrix.docker-image-tag >>-<< matrix.docker-image-platform >>
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          matrix:
            parameters:
              docker-image-tag: ["orchestrate:${CIRCLE_TAG}", "orchestrate:latest"]
              docker-image-platform: ["linux/amd64", "linux/arm64"]
          docker-image-registry: consensys
          docker-image-sign: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
      - deploy-qa:
          context:
            - cloudsmith-tanuki-rw
          filters:
            branches:
              only: main
          requires:
            - push-orchestrate-image-orchestrate:${CIRCLE_SHA1:0:7}
      - run-e2e:
          filters:
            branches:
              only: main
          requires:
            - deploy-qa
      - run-stress:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-staging
      - deploy-staging:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - release-tag-orchestrate:${CIRCLE_TAG}-linux/amd64
  # schedule-stress:
  #   triggers:
  #     - schedule:
  #         cron: "3 * * * *"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - run-stress:
  #         environment_values: "staging"
  #         stress_concurrency: "3"
  #         stress_iteration: "200"
  #         stress_timeout: "30m"
