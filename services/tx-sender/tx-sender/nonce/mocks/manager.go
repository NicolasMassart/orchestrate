// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/ConsenSys/orchestrate/pkg/types/entities"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetNonce mocks base method
func (m *MockManager) GetNonce(ctx context.Context, job *entities.Job) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", ctx, job)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockManagerMockRecorder) GetNonce(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockManager)(nil).GetNonce), ctx, job)
}

// CleanNonce mocks base method
func (m *MockManager) CleanNonce(ctx context.Context, job *entities.Job, jobErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanNonce", ctx, job, jobErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanNonce indicates an expected call of CleanNonce
func (mr *MockManagerMockRecorder) CleanNonce(ctx, job, jobErr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanNonce", reflect.TypeOf((*MockManager)(nil).CleanNonce), ctx, job, jobErr)
}

// IncrementNonce mocks base method
func (m *MockManager) IncrementNonce(ctx context.Context, job *entities.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementNonce", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementNonce indicates an expected call of IncrementNonce
func (mr *MockManagerMockRecorder) IncrementNonce(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNonce", reflect.TypeOf((*MockManager)(nil).IncrementNonce), ctx, job)
}
