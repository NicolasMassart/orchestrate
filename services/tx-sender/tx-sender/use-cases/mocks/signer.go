// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/ConsenSys/orchestrate/pkg/types/entities"
	reflect "reflect"
)

// MockSignETHTransactionUseCase is a mock of SignETHTransactionUseCase interface
type MockSignETHTransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSignETHTransactionUseCaseMockRecorder
}

// MockSignETHTransactionUseCaseMockRecorder is the mock recorder for MockSignETHTransactionUseCase
type MockSignETHTransactionUseCaseMockRecorder struct {
	mock *MockSignETHTransactionUseCase
}

// NewMockSignETHTransactionUseCase creates a new mock instance
func NewMockSignETHTransactionUseCase(ctrl *gomock.Controller) *MockSignETHTransactionUseCase {
	mock := &MockSignETHTransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockSignETHTransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignETHTransactionUseCase) EXPECT() *MockSignETHTransactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSignETHTransactionUseCase) Execute(ctx context.Context, job *entities.Job) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute
func (mr *MockSignETHTransactionUseCaseMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSignETHTransactionUseCase)(nil).Execute), ctx, job)
}

// MockSignEEATransactionUseCase is a mock of SignEEATransactionUseCase interface
type MockSignEEATransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSignEEATransactionUseCaseMockRecorder
}

// MockSignEEATransactionUseCaseMockRecorder is the mock recorder for MockSignEEATransactionUseCase
type MockSignEEATransactionUseCaseMockRecorder struct {
	mock *MockSignEEATransactionUseCase
}

// NewMockSignEEATransactionUseCase creates a new mock instance
func NewMockSignEEATransactionUseCase(ctrl *gomock.Controller) *MockSignEEATransactionUseCase {
	mock := &MockSignEEATransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockSignEEATransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignEEATransactionUseCase) EXPECT() *MockSignEEATransactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSignEEATransactionUseCase) Execute(ctx context.Context, job *entities.Job) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute
func (mr *MockSignEEATransactionUseCaseMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSignEEATransactionUseCase)(nil).Execute), ctx, job)
}

// MockSignQuorumPrivateTransactionUseCase is a mock of SignQuorumPrivateTransactionUseCase interface
type MockSignQuorumPrivateTransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSignQuorumPrivateTransactionUseCaseMockRecorder
}

// MockSignQuorumPrivateTransactionUseCaseMockRecorder is the mock recorder for MockSignQuorumPrivateTransactionUseCase
type MockSignQuorumPrivateTransactionUseCaseMockRecorder struct {
	mock *MockSignQuorumPrivateTransactionUseCase
}

// NewMockSignQuorumPrivateTransactionUseCase creates a new mock instance
func NewMockSignQuorumPrivateTransactionUseCase(ctrl *gomock.Controller) *MockSignQuorumPrivateTransactionUseCase {
	mock := &MockSignQuorumPrivateTransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockSignQuorumPrivateTransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignQuorumPrivateTransactionUseCase) EXPECT() *MockSignQuorumPrivateTransactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSignQuorumPrivateTransactionUseCase) Execute(ctx context.Context, job *entities.Job) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute
func (mr *MockSignQuorumPrivateTransactionUseCaseMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSignQuorumPrivateTransactionUseCase)(nil).Execute), ctx, job)
}
