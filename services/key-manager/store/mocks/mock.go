// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/ConsenSys/orchestrate/pkg/types/entities"
	ethereum "github.com/ConsenSys/orchestrate/pkg/types/keymanager/ethereum"
	reflect "reflect"
)

// MockVault is a mock of Vault interface
type MockVault struct {
	ctrl     *gomock.Controller
	recorder *MockVaultMockRecorder
}

// MockVaultMockRecorder is the mock recorder for MockVault
type MockVaultMockRecorder struct {
	mock *MockVault
}

// NewMockVault creates a new mock instance
func NewMockVault(ctrl *gomock.Controller) *MockVault {
	mock := &MockVault{ctrl: ctrl}
	mock.recorder = &MockVaultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVault) EXPECT() *MockVaultMockRecorder {
	return m.recorder
}

// ETHCreateAccount mocks base method
func (m *MockVault) ETHCreateAccount(namespace string) (*entities.ETHAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHCreateAccount", namespace)
	ret0, _ := ret[0].(*entities.ETHAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHCreateAccount indicates an expected call of ETHCreateAccount
func (mr *MockVaultMockRecorder) ETHCreateAccount(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHCreateAccount", reflect.TypeOf((*MockVault)(nil).ETHCreateAccount), namespace)
}

// ETHImportAccount mocks base method
func (m *MockVault) ETHImportAccount(namespace, privateKey string) (*entities.ETHAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHImportAccount", namespace, privateKey)
	ret0, _ := ret[0].(*entities.ETHAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHImportAccount indicates an expected call of ETHImportAccount
func (mr *MockVaultMockRecorder) ETHImportAccount(namespace, privateKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHImportAccount", reflect.TypeOf((*MockVault)(nil).ETHImportAccount), namespace, privateKey)
}

// ETHSign mocks base method
func (m *MockVault) ETHSign(address, namespace, data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSign", address, namespace, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSign indicates an expected call of ETHSign
func (mr *MockVaultMockRecorder) ETHSign(address, namespace, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSign", reflect.TypeOf((*MockVault)(nil).ETHSign), address, namespace, data)
}

// ETHSignTransaction mocks base method
func (m *MockVault) ETHSignTransaction(address string, request *ethereum.SignETHTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignTransaction", address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignTransaction indicates an expected call of ETHSignTransaction
func (mr *MockVaultMockRecorder) ETHSignTransaction(address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignTransaction", reflect.TypeOf((*MockVault)(nil).ETHSignTransaction), address, request)
}

// ETHSignQuorumPrivateTransaction mocks base method
func (m *MockVault) ETHSignQuorumPrivateTransaction(address string, request *ethereum.SignQuorumPrivateTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignQuorumPrivateTransaction", address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignQuorumPrivateTransaction indicates an expected call of ETHSignQuorumPrivateTransaction
func (mr *MockVaultMockRecorder) ETHSignQuorumPrivateTransaction(address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignQuorumPrivateTransaction", reflect.TypeOf((*MockVault)(nil).ETHSignQuorumPrivateTransaction), address, request)
}

// ETHSignEEATransaction mocks base method
func (m *MockVault) ETHSignEEATransaction(address string, request *ethereum.SignEEATransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignEEATransaction", address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignEEATransaction indicates an expected call of ETHSignEEATransaction
func (mr *MockVaultMockRecorder) ETHSignEEATransaction(address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignEEATransaction", reflect.TypeOf((*MockVault)(nil).ETHSignEEATransaction), address, request)
}

// ETHListAccounts mocks base method
func (m *MockVault) ETHListAccounts(namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHListAccounts", namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHListAccounts indicates an expected call of ETHListAccounts
func (mr *MockVaultMockRecorder) ETHListAccounts(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHListAccounts", reflect.TypeOf((*MockVault)(nil).ETHListAccounts), namespace)
}

// ETHListNamespaces mocks base method
func (m *MockVault) ETHListNamespaces() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHListNamespaces")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHListNamespaces indicates an expected call of ETHListNamespaces
func (mr *MockVaultMockRecorder) ETHListNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHListNamespaces", reflect.TypeOf((*MockVault)(nil).ETHListNamespaces))
}

// ETHGetAccount mocks base method
func (m *MockVault) ETHGetAccount(address, namespace string) (*entities.ETHAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHGetAccount", address, namespace)
	ret0, _ := ret[0].(*entities.ETHAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHGetAccount indicates an expected call of ETHGetAccount
func (mr *MockVaultMockRecorder) ETHGetAccount(address, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHGetAccount", reflect.TypeOf((*MockVault)(nil).ETHGetAccount), address, namespace)
}

// ZKSCreateAccount mocks base method
func (m *MockVault) ZKSCreateAccount(namespace string) (*entities.ZKSAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSCreateAccount", namespace)
	ret0, _ := ret[0].(*entities.ZKSAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSCreateAccount indicates an expected call of ZKSCreateAccount
func (mr *MockVaultMockRecorder) ZKSCreateAccount(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSCreateAccount", reflect.TypeOf((*MockVault)(nil).ZKSCreateAccount), namespace)
}

// ZKSListNamespaces mocks base method
func (m *MockVault) ZKSListNamespaces() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSListNamespaces")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSListNamespaces indicates an expected call of ZKSListNamespaces
func (mr *MockVaultMockRecorder) ZKSListNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSListNamespaces", reflect.TypeOf((*MockVault)(nil).ZKSListNamespaces))
}

// ZKSSign mocks base method
func (m *MockVault) ZKSSign(pubKey, namespace, data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSSign", pubKey, namespace, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSSign indicates an expected call of ZKSSign
func (mr *MockVaultMockRecorder) ZKSSign(pubKey, namespace, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSSign", reflect.TypeOf((*MockVault)(nil).ZKSSign), pubKey, namespace, data)
}

// ZKSListAccounts mocks base method
func (m *MockVault) ZKSListAccounts(namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSListAccounts", namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSListAccounts indicates an expected call of ZKSListAccounts
func (mr *MockVaultMockRecorder) ZKSListAccounts(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSListAccounts", reflect.TypeOf((*MockVault)(nil).ZKSListAccounts), namespace)
}

// ZKSGetAccount mocks base method
func (m *MockVault) ZKSGetAccount(pubKey, namespace string) (*entities.ZKSAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSGetAccount", pubKey, namespace)
	ret0, _ := ret[0].(*entities.ZKSAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSGetAccount indicates an expected call of ZKSGetAccount
func (mr *MockVaultMockRecorder) ZKSGetAccount(pubKey, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSGetAccount", reflect.TypeOf((*MockVault)(nil).ZKSGetAccount), pubKey, namespace)
}

// HealthCheck mocks base method
func (m *MockVault) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockVaultMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVault)(nil).HealthCheck))
}
