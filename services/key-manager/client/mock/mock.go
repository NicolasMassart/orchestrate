// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	healthcheck "github.com/heptiolabs/healthcheck"
	keymanager "github.com/ConsenSys/orchestrate/pkg/types/keymanager"
	ethereum "github.com/ConsenSys/orchestrate/pkg/types/keymanager/ethereum"
	zksnarks "github.com/ConsenSys/orchestrate/pkg/types/keymanager/zk-snarks"
	reflect "reflect"
)

// MockEthereumAccountClient is a mock of EthereumAccountClient interface
type MockEthereumAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthereumAccountClientMockRecorder
}

// MockEthereumAccountClientMockRecorder is the mock recorder for MockEthereumAccountClient
type MockEthereumAccountClientMockRecorder struct {
	mock *MockEthereumAccountClient
}

// NewMockEthereumAccountClient creates a new mock instance
func NewMockEthereumAccountClient(ctrl *gomock.Controller) *MockEthereumAccountClient {
	mock := &MockEthereumAccountClient{ctrl: ctrl}
	mock.recorder = &MockEthereumAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthereumAccountClient) EXPECT() *MockEthereumAccountClientMockRecorder {
	return m.recorder
}

// ETHCreateAccount mocks base method
func (m *MockEthereumAccountClient) ETHCreateAccount(ctx context.Context, request *ethereum.CreateETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHCreateAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHCreateAccount indicates an expected call of ETHCreateAccount
func (mr *MockEthereumAccountClientMockRecorder) ETHCreateAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHCreateAccount", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHCreateAccount), ctx, request)
}

// ETHImportAccount mocks base method
func (m *MockEthereumAccountClient) ETHImportAccount(ctx context.Context, request *ethereum.ImportETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHImportAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHImportAccount indicates an expected call of ETHImportAccount
func (mr *MockEthereumAccountClientMockRecorder) ETHImportAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHImportAccount", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHImportAccount), ctx, request)
}

// ETHSign mocks base method
func (m *MockEthereumAccountClient) ETHSign(ctx context.Context, address string, request *keymanager.SignPayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSign", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSign indicates an expected call of ETHSign
func (mr *MockEthereumAccountClientMockRecorder) ETHSign(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSign", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHSign), ctx, address, request)
}

// ETHSignTypedData mocks base method
func (m *MockEthereumAccountClient) ETHSignTypedData(ctx context.Context, address string, request *ethereum.SignTypedDataRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignTypedData", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignTypedData indicates an expected call of ETHSignTypedData
func (mr *MockEthereumAccountClientMockRecorder) ETHSignTypedData(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignTypedData", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHSignTypedData), ctx, address, request)
}

// ETHSignTransaction mocks base method
func (m *MockEthereumAccountClient) ETHSignTransaction(ctx context.Context, address string, request *ethereum.SignETHTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignTransaction", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignTransaction indicates an expected call of ETHSignTransaction
func (mr *MockEthereumAccountClientMockRecorder) ETHSignTransaction(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignTransaction", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHSignTransaction), ctx, address, request)
}

// ETHSignQuorumPrivateTransaction mocks base method
func (m *MockEthereumAccountClient) ETHSignQuorumPrivateTransaction(ctx context.Context, address string, request *ethereum.SignQuorumPrivateTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignQuorumPrivateTransaction", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignQuorumPrivateTransaction indicates an expected call of ETHSignQuorumPrivateTransaction
func (mr *MockEthereumAccountClientMockRecorder) ETHSignQuorumPrivateTransaction(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignQuorumPrivateTransaction", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHSignQuorumPrivateTransaction), ctx, address, request)
}

// ETHSignEEATransaction mocks base method
func (m *MockEthereumAccountClient) ETHSignEEATransaction(ctx context.Context, address string, request *ethereum.SignEEATransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignEEATransaction", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignEEATransaction indicates an expected call of ETHSignEEATransaction
func (mr *MockEthereumAccountClientMockRecorder) ETHSignEEATransaction(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignEEATransaction", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHSignEEATransaction), ctx, address, request)
}

// ETHListAccounts mocks base method
func (m *MockEthereumAccountClient) ETHListAccounts(ctx context.Context, namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHListAccounts", ctx, namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHListAccounts indicates an expected call of ETHListAccounts
func (mr *MockEthereumAccountClientMockRecorder) ETHListAccounts(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHListAccounts", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHListAccounts), ctx, namespace)
}

// ETHListNamespaces mocks base method
func (m *MockEthereumAccountClient) ETHListNamespaces(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHListNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHListNamespaces indicates an expected call of ETHListNamespaces
func (mr *MockEthereumAccountClientMockRecorder) ETHListNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHListNamespaces", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHListNamespaces), ctx)
}

// ETHGetAccount mocks base method
func (m *MockEthereumAccountClient) ETHGetAccount(ctx context.Context, address, namespace string) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHGetAccount", ctx, address, namespace)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHGetAccount indicates an expected call of ETHGetAccount
func (mr *MockEthereumAccountClientMockRecorder) ETHGetAccount(ctx, address, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHGetAccount", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHGetAccount), ctx, address, namespace)
}

// ETHVerifySignature mocks base method
func (m *MockEthereumAccountClient) ETHVerifySignature(ctx context.Context, request *ethereum.VerifyPayloadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHVerifySignature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ETHVerifySignature indicates an expected call of ETHVerifySignature
func (mr *MockEthereumAccountClientMockRecorder) ETHVerifySignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHVerifySignature", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHVerifySignature), ctx, request)
}

// ETHVerifyTypedDataSignature mocks base method
func (m *MockEthereumAccountClient) ETHVerifyTypedDataSignature(ctx context.Context, request *ethereum.VerifyTypedDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHVerifyTypedDataSignature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ETHVerifyTypedDataSignature indicates an expected call of ETHVerifyTypedDataSignature
func (mr *MockEthereumAccountClientMockRecorder) ETHVerifyTypedDataSignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHVerifyTypedDataSignature", reflect.TypeOf((*MockEthereumAccountClient)(nil).ETHVerifyTypedDataSignature), ctx, request)
}

// MockZKSAccountClient is a mock of ZKSAccountClient interface
type MockZKSAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockZKSAccountClientMockRecorder
}

// MockZKSAccountClientMockRecorder is the mock recorder for MockZKSAccountClient
type MockZKSAccountClientMockRecorder struct {
	mock *MockZKSAccountClient
}

// NewMockZKSAccountClient creates a new mock instance
func NewMockZKSAccountClient(ctrl *gomock.Controller) *MockZKSAccountClient {
	mock := &MockZKSAccountClient{ctrl: ctrl}
	mock.recorder = &MockZKSAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZKSAccountClient) EXPECT() *MockZKSAccountClientMockRecorder {
	return m.recorder
}

// ZKSCreateAccount mocks base method
func (m *MockZKSAccountClient) ZKSCreateAccount(ctx context.Context, request *zksnarks.CreateZKSAccountRequest) (*zksnarks.ZKSAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSCreateAccount", ctx, request)
	ret0, _ := ret[0].(*zksnarks.ZKSAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSCreateAccount indicates an expected call of ZKSCreateAccount
func (mr *MockZKSAccountClientMockRecorder) ZKSCreateAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSCreateAccount", reflect.TypeOf((*MockZKSAccountClient)(nil).ZKSCreateAccount), ctx, request)
}

// ZKSSign mocks base method
func (m *MockZKSAccountClient) ZKSSign(ctx context.Context, address string, request *keymanager.SignPayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSSign", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSSign indicates an expected call of ZKSSign
func (mr *MockZKSAccountClientMockRecorder) ZKSSign(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSSign", reflect.TypeOf((*MockZKSAccountClient)(nil).ZKSSign), ctx, address, request)
}

// ZKSListAccounts mocks base method
func (m *MockZKSAccountClient) ZKSListAccounts(ctx context.Context, namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSListAccounts", ctx, namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSListAccounts indicates an expected call of ZKSListAccounts
func (mr *MockZKSAccountClientMockRecorder) ZKSListAccounts(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSListAccounts", reflect.TypeOf((*MockZKSAccountClient)(nil).ZKSListAccounts), ctx, namespace)
}

// ZKSListNamespaces mocks base method
func (m *MockZKSAccountClient) ZKSListNamespaces(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSListNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSListNamespaces indicates an expected call of ZKSListNamespaces
func (mr *MockZKSAccountClientMockRecorder) ZKSListNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSListNamespaces", reflect.TypeOf((*MockZKSAccountClient)(nil).ZKSListNamespaces), ctx)
}

// ZKSGetAccount mocks base method
func (m *MockZKSAccountClient) ZKSGetAccount(ctx context.Context, address, namespace string) (*zksnarks.ZKSAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSGetAccount", ctx, address, namespace)
	ret0, _ := ret[0].(*zksnarks.ZKSAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSGetAccount indicates an expected call of ZKSGetAccount
func (mr *MockZKSAccountClientMockRecorder) ZKSGetAccount(ctx, address, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSGetAccount", reflect.TypeOf((*MockZKSAccountClient)(nil).ZKSGetAccount), ctx, address, namespace)
}

// ZKSVerifySignature mocks base method
func (m *MockZKSAccountClient) ZKSVerifySignature(ctx context.Context, request *zksnarks.VerifyPayloadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSVerifySignature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZKSVerifySignature indicates an expected call of ZKSVerifySignature
func (mr *MockZKSAccountClientMockRecorder) ZKSVerifySignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSVerifySignature", reflect.TypeOf((*MockZKSAccountClient)(nil).ZKSVerifySignature), ctx, request)
}

// MockKeyManagerClient is a mock of KeyManagerClient interface
type MockKeyManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerClientMockRecorder
}

// MockKeyManagerClientMockRecorder is the mock recorder for MockKeyManagerClient
type MockKeyManagerClientMockRecorder struct {
	mock *MockKeyManagerClient
}

// NewMockKeyManagerClient creates a new mock instance
func NewMockKeyManagerClient(ctrl *gomock.Controller) *MockKeyManagerClient {
	mock := &MockKeyManagerClient{ctrl: ctrl}
	mock.recorder = &MockKeyManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManagerClient) EXPECT() *MockKeyManagerClientMockRecorder {
	return m.recorder
}

// Checker mocks base method
func (m *MockKeyManagerClient) Checker() healthcheck.Check {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(healthcheck.Check)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockKeyManagerClientMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockKeyManagerClient)(nil).Checker))
}

// ETHCreateAccount mocks base method
func (m *MockKeyManagerClient) ETHCreateAccount(ctx context.Context, request *ethereum.CreateETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHCreateAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHCreateAccount indicates an expected call of ETHCreateAccount
func (mr *MockKeyManagerClientMockRecorder) ETHCreateAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHCreateAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHCreateAccount), ctx, request)
}

// ETHImportAccount mocks base method
func (m *MockKeyManagerClient) ETHImportAccount(ctx context.Context, request *ethereum.ImportETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHImportAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHImportAccount indicates an expected call of ETHImportAccount
func (mr *MockKeyManagerClientMockRecorder) ETHImportAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHImportAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHImportAccount), ctx, request)
}

// ETHSign mocks base method
func (m *MockKeyManagerClient) ETHSign(ctx context.Context, address string, request *keymanager.SignPayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSign", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSign indicates an expected call of ETHSign
func (mr *MockKeyManagerClientMockRecorder) ETHSign(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSign", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHSign), ctx, address, request)
}

// ETHSignTypedData mocks base method
func (m *MockKeyManagerClient) ETHSignTypedData(ctx context.Context, address string, request *ethereum.SignTypedDataRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignTypedData", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignTypedData indicates an expected call of ETHSignTypedData
func (mr *MockKeyManagerClientMockRecorder) ETHSignTypedData(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignTypedData", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHSignTypedData), ctx, address, request)
}

// ETHSignTransaction mocks base method
func (m *MockKeyManagerClient) ETHSignTransaction(ctx context.Context, address string, request *ethereum.SignETHTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignTransaction", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignTransaction indicates an expected call of ETHSignTransaction
func (mr *MockKeyManagerClientMockRecorder) ETHSignTransaction(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignTransaction", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHSignTransaction), ctx, address, request)
}

// ETHSignQuorumPrivateTransaction mocks base method
func (m *MockKeyManagerClient) ETHSignQuorumPrivateTransaction(ctx context.Context, address string, request *ethereum.SignQuorumPrivateTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignQuorumPrivateTransaction", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignQuorumPrivateTransaction indicates an expected call of ETHSignQuorumPrivateTransaction
func (mr *MockKeyManagerClientMockRecorder) ETHSignQuorumPrivateTransaction(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignQuorumPrivateTransaction", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHSignQuorumPrivateTransaction), ctx, address, request)
}

// ETHSignEEATransaction mocks base method
func (m *MockKeyManagerClient) ETHSignEEATransaction(ctx context.Context, address string, request *ethereum.SignEEATransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHSignEEATransaction", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHSignEEATransaction indicates an expected call of ETHSignEEATransaction
func (mr *MockKeyManagerClientMockRecorder) ETHSignEEATransaction(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHSignEEATransaction", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHSignEEATransaction), ctx, address, request)
}

// ETHListAccounts mocks base method
func (m *MockKeyManagerClient) ETHListAccounts(ctx context.Context, namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHListAccounts", ctx, namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHListAccounts indicates an expected call of ETHListAccounts
func (mr *MockKeyManagerClientMockRecorder) ETHListAccounts(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHListAccounts", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHListAccounts), ctx, namespace)
}

// ETHListNamespaces mocks base method
func (m *MockKeyManagerClient) ETHListNamespaces(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHListNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHListNamespaces indicates an expected call of ETHListNamespaces
func (mr *MockKeyManagerClientMockRecorder) ETHListNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHListNamespaces", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHListNamespaces), ctx)
}

// ETHGetAccount mocks base method
func (m *MockKeyManagerClient) ETHGetAccount(ctx context.Context, address, namespace string) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHGetAccount", ctx, address, namespace)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ETHGetAccount indicates an expected call of ETHGetAccount
func (mr *MockKeyManagerClientMockRecorder) ETHGetAccount(ctx, address, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHGetAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHGetAccount), ctx, address, namespace)
}

// ETHVerifySignature mocks base method
func (m *MockKeyManagerClient) ETHVerifySignature(ctx context.Context, request *ethereum.VerifyPayloadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHVerifySignature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ETHVerifySignature indicates an expected call of ETHVerifySignature
func (mr *MockKeyManagerClientMockRecorder) ETHVerifySignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHVerifySignature", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHVerifySignature), ctx, request)
}

// ETHVerifyTypedDataSignature mocks base method
func (m *MockKeyManagerClient) ETHVerifyTypedDataSignature(ctx context.Context, request *ethereum.VerifyTypedDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETHVerifyTypedDataSignature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ETHVerifyTypedDataSignature indicates an expected call of ETHVerifyTypedDataSignature
func (mr *MockKeyManagerClientMockRecorder) ETHVerifyTypedDataSignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETHVerifyTypedDataSignature", reflect.TypeOf((*MockKeyManagerClient)(nil).ETHVerifyTypedDataSignature), ctx, request)
}

// ZKSCreateAccount mocks base method
func (m *MockKeyManagerClient) ZKSCreateAccount(ctx context.Context, request *zksnarks.CreateZKSAccountRequest) (*zksnarks.ZKSAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSCreateAccount", ctx, request)
	ret0, _ := ret[0].(*zksnarks.ZKSAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSCreateAccount indicates an expected call of ZKSCreateAccount
func (mr *MockKeyManagerClientMockRecorder) ZKSCreateAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSCreateAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ZKSCreateAccount), ctx, request)
}

// ZKSSign mocks base method
func (m *MockKeyManagerClient) ZKSSign(ctx context.Context, address string, request *keymanager.SignPayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSSign", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSSign indicates an expected call of ZKSSign
func (mr *MockKeyManagerClientMockRecorder) ZKSSign(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSSign", reflect.TypeOf((*MockKeyManagerClient)(nil).ZKSSign), ctx, address, request)
}

// ZKSListAccounts mocks base method
func (m *MockKeyManagerClient) ZKSListAccounts(ctx context.Context, namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSListAccounts", ctx, namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSListAccounts indicates an expected call of ZKSListAccounts
func (mr *MockKeyManagerClientMockRecorder) ZKSListAccounts(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSListAccounts", reflect.TypeOf((*MockKeyManagerClient)(nil).ZKSListAccounts), ctx, namespace)
}

// ZKSListNamespaces mocks base method
func (m *MockKeyManagerClient) ZKSListNamespaces(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSListNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSListNamespaces indicates an expected call of ZKSListNamespaces
func (mr *MockKeyManagerClientMockRecorder) ZKSListNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSListNamespaces", reflect.TypeOf((*MockKeyManagerClient)(nil).ZKSListNamespaces), ctx)
}

// ZKSGetAccount mocks base method
func (m *MockKeyManagerClient) ZKSGetAccount(ctx context.Context, address, namespace string) (*zksnarks.ZKSAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSGetAccount", ctx, address, namespace)
	ret0, _ := ret[0].(*zksnarks.ZKSAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZKSGetAccount indicates an expected call of ZKSGetAccount
func (mr *MockKeyManagerClientMockRecorder) ZKSGetAccount(ctx, address, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSGetAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ZKSGetAccount), ctx, address, namespace)
}

// ZKSVerifySignature mocks base method
func (m *MockKeyManagerClient) ZKSVerifySignature(ctx context.Context, request *zksnarks.VerifyPayloadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZKSVerifySignature", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZKSVerifySignature indicates an expected call of ZKSVerifySignature
func (mr *MockKeyManagerClientMockRecorder) ZKSVerifySignature(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZKSVerifySignature", reflect.TypeOf((*MockKeyManagerClient)(nil).ZKSVerifySignature), ctx, request)
}
