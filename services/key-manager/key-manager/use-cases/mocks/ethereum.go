// Code generated by MockGen. DO NOT EDIT.
// Source: ethereum.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	core "github.com/ethereum/go-ethereum/signer/core"
	gomock "github.com/golang/mock/gomock"
	usecases "github.com/ConsenSys/orchestrate/services/key-manager/key-manager/use-cases"
	reflect "reflect"
)

// MockETHUseCases is a mock of ETHUseCases interface
type MockETHUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockETHUseCasesMockRecorder
}

// MockETHUseCasesMockRecorder is the mock recorder for MockETHUseCases
type MockETHUseCasesMockRecorder struct {
	mock *MockETHUseCases
}

// NewMockETHUseCases creates a new mock instance
func NewMockETHUseCases(ctrl *gomock.Controller) *MockETHUseCases {
	mock := &MockETHUseCases{ctrl: ctrl}
	mock.recorder = &MockETHUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockETHUseCases) EXPECT() *MockETHUseCasesMockRecorder {
	return m.recorder
}

// SignTypedData mocks base method
func (m *MockETHUseCases) SignTypedData() usecases.SignTypedDataUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTypedData")
	ret0, _ := ret[0].(usecases.SignTypedDataUseCase)
	return ret0
}

// SignTypedData indicates an expected call of SignTypedData
func (mr *MockETHUseCasesMockRecorder) SignTypedData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTypedData", reflect.TypeOf((*MockETHUseCases)(nil).SignTypedData))
}

// VerifySignature mocks base method
func (m *MockETHUseCases) VerifySignature() usecases.VerifyETHSignatureUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignature")
	ret0, _ := ret[0].(usecases.VerifyETHSignatureUseCase)
	return ret0
}

// VerifySignature indicates an expected call of VerifySignature
func (mr *MockETHUseCasesMockRecorder) VerifySignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignature", reflect.TypeOf((*MockETHUseCases)(nil).VerifySignature))
}

// VerifyTypedDataSignature mocks base method
func (m *MockETHUseCases) VerifyTypedDataSignature() usecases.VerifyTypedDataSignatureUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTypedDataSignature")
	ret0, _ := ret[0].(usecases.VerifyTypedDataSignatureUseCase)
	return ret0
}

// VerifyTypedDataSignature indicates an expected call of VerifyTypedDataSignature
func (mr *MockETHUseCasesMockRecorder) VerifyTypedDataSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTypedDataSignature", reflect.TypeOf((*MockETHUseCases)(nil).VerifyTypedDataSignature))
}

// MockSignTypedDataUseCase is a mock of SignTypedDataUseCase interface
type MockSignTypedDataUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSignTypedDataUseCaseMockRecorder
}

// MockSignTypedDataUseCaseMockRecorder is the mock recorder for MockSignTypedDataUseCase
type MockSignTypedDataUseCaseMockRecorder struct {
	mock *MockSignTypedDataUseCase
}

// NewMockSignTypedDataUseCase creates a new mock instance
func NewMockSignTypedDataUseCase(ctrl *gomock.Controller) *MockSignTypedDataUseCase {
	mock := &MockSignTypedDataUseCase{ctrl: ctrl}
	mock.recorder = &MockSignTypedDataUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignTypedDataUseCase) EXPECT() *MockSignTypedDataUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSignTypedDataUseCase) Execute(ctx context.Context, address, namespace string, typedData *core.TypedData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, address, namespace, typedData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSignTypedDataUseCaseMockRecorder) Execute(ctx, address, namespace, typedData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSignTypedDataUseCase)(nil).Execute), ctx, address, namespace, typedData)
}

// MockVerifyETHSignatureUseCase is a mock of VerifyETHSignatureUseCase interface
type MockVerifyETHSignatureUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyETHSignatureUseCaseMockRecorder
}

// MockVerifyETHSignatureUseCaseMockRecorder is the mock recorder for MockVerifyETHSignatureUseCase
type MockVerifyETHSignatureUseCaseMockRecorder struct {
	mock *MockVerifyETHSignatureUseCase
}

// NewMockVerifyETHSignatureUseCase creates a new mock instance
func NewMockVerifyETHSignatureUseCase(ctrl *gomock.Controller) *MockVerifyETHSignatureUseCase {
	mock := &MockVerifyETHSignatureUseCase{ctrl: ctrl}
	mock.recorder = &MockVerifyETHSignatureUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifyETHSignatureUseCase) EXPECT() *MockVerifyETHSignatureUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockVerifyETHSignatureUseCase) Execute(ctx context.Context, address, signature, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, address, signature, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockVerifyETHSignatureUseCaseMockRecorder) Execute(ctx, address, signature, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVerifyETHSignatureUseCase)(nil).Execute), ctx, address, signature, payload)
}

// MockVerifyTypedDataSignatureUseCase is a mock of VerifyTypedDataSignatureUseCase interface
type MockVerifyTypedDataSignatureUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyTypedDataSignatureUseCaseMockRecorder
}

// MockVerifyTypedDataSignatureUseCaseMockRecorder is the mock recorder for MockVerifyTypedDataSignatureUseCase
type MockVerifyTypedDataSignatureUseCaseMockRecorder struct {
	mock *MockVerifyTypedDataSignatureUseCase
}

// NewMockVerifyTypedDataSignatureUseCase creates a new mock instance
func NewMockVerifyTypedDataSignatureUseCase(ctrl *gomock.Controller) *MockVerifyTypedDataSignatureUseCase {
	mock := &MockVerifyTypedDataSignatureUseCase{ctrl: ctrl}
	mock.recorder = &MockVerifyTypedDataSignatureUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifyTypedDataSignatureUseCase) EXPECT() *MockVerifyTypedDataSignatureUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockVerifyTypedDataSignatureUseCase) Execute(ctx context.Context, address, signature string, typedData *core.TypedData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, address, signature, typedData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockVerifyTypedDataSignatureUseCaseMockRecorder) Execute(ctx, address, signature, typedData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVerifyTypedDataSignatureUseCase)(nil).Execute), ctx, address, signature, typedData)
}
